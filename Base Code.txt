```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Diplomatic Relations Map - Refined</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Light Mode Base */
            --bg-color-light: #f3f4f6; --text-color-light: #1f2937; --panel-bg-light: white; --panel-text-light: #333; --border-color-light: #e5e7eb; --header-text-light: #4338ca;
            /* Dark Mode Base */
            --bg-color-dark: #1f2937; --text-color-dark: #f3f4f6; --panel-bg-dark: #374151; --panel-text-dark: #f9fafb; --border-color-dark: #4b5563; --header-text-dark: #a5b4fc;
            /* Control Buttons */
            --button-bg-light: #e5e7eb; /* gray-200 */
            --button-text-light: #374151; /* gray-700 */
            --button-hover-bg-light: #d1d5db; /* gray-300 */
            --button-active-bg-light: #a5b4fc; /* Light Blue/Indigo for active */
            --button-active-text-light: #1e1b4b; 
            --button-active-border-light: #6366f1; 

            --button-bg-dark: #4b5563; /* gray-600 */
            --button-text-dark: #f3f4f6; /* gray-100 */
            --button-hover-bg-dark: #6b7280; /* gray-500 */
            --button-active-bg-dark: #818cf8; /* Lighter Blue/Indigo for active dark */
            --button-active-text-dark: #1e1b4b; 
            --button-active-border-dark: #a5b4fc; 
            
            /* Map Specific */
            --map-bg-light: #dbeafe; --map-bg-dark: #0f172a; 
            /* Highlight Colors */
            --country-highlight-fill-light: #60a5fa; /* Tailwind blue-400 */
            --country-highlight-border-light: #3b82f6; /* Tailwind blue-500 */
            --country-highlight-fill-dark: #3b82f6; /* Tailwind blue-500 */
            --country-highlight-border-dark: #2563eb; /* Tailwind blue-600 */

            --bloc-highlight-fill-light: #6ee7b7; --bloc-highlight-border-light: #10b981;
            --bloc-highlight-fill-dark: #34d399; --bloc-highlight-border-dark: #059669;

            /* Conflict & Nuclear Colors */
            --conflict-red-fill: rgba(239, 68, 68, 0.6); --conflict-red-border: #dc2626; 
            --conflict-brown-fill: rgba(140, 90, 60, 0.6); --conflict-brown-border: #8c5a3c; 
            --conflict-orange-fill: rgba(249, 115, 22, 0.6); --conflict-orange-border: #f97316; 
            --conflict-yellow-fill: rgba(250, 204, 21, 0.5); --conflict-yellow-border: #f59e0b; 
            --nuclear-declared-fill: rgba(249, 115, 22, 0.6); --nuclear-declared-border: #f97316; /* Orange */
            --nuclear-nonnpt-fill: rgba(239, 68, 68, 0.6); --nuclear-nonnpt-border: #dc2626;   /* Red */
            --nuclear-threshold-fill: rgba(250, 204, 21, 0.5); --nuclear-threshold-border: #f59e0b; /* Yellow */
            
            /* Asset Highlight Colors */
            --us-base-adversary-fill: rgba(100, 100, 100, 0.5); --us-base-adversary-border: #666666; /* Grey for adversaries */
            --rival-country-fill: rgba(169, 169, 169, 0.5); /* DarkGray with opacity */
            --rival-country-border: #808080; /* Gray */

            --china-highlight-fill: rgba(220, 38, 38, 0.7); 
            --china-highlight-border: #b91c1c; 
            --russia-highlight-fill: rgba(250, 204, 21, 0.7); 
            --russia-highlight-border: #f59e0b; 
            --iran-highlight-fill: rgba(5, 150, 105, 0.7); /* Used for Iran country and bases */
            --iran-highlight-border: #047857;
            --iran-proxy-highlight-fill: rgba(34, 139, 34, 0.6); /* ForestGreen for proxies, slightly different */
            --iran-proxy-highlight-border: #228B22;
            --india-highlight-fill: rgba(249, 115, 22, 0.7); 
            --india-highlight-border: #ea580c; 
            
            --uk-highlight-fill: rgba(0, 0, 139, 0.7); /* DarkBlue */
            --uk-highlight-border: #000080; /* Navy */
            --france-highlight-fill: rgba(128, 0, 128, 0.7); /* Purple */
            --france-highlight-border: #4b0082; /* Indigo */
            --italy-highlight-fill: rgba(50, 205, 50, 0.7); /* LimeGreen */
            --italy-highlight-border: #228b22; /* ForestGreen */
            --turkey-highlight-fill: rgba(255, 105, 180, 0.7); /* HotPink */
            --turkey-highlight-border: #ff1493; /* DeepPink */
            --israel-highlight-fill: rgba(135, 206, 250, 0.7); /* LightSkyBlue */
            --israel-highlight-border: #00BFFF; /* DeepSkyBlue */
        }
        html, body { height: 100%; margin: 0; padding: 0; overflow: hidden; font-family: 'Inter', sans-serif; background-color: var(--bg-color-light); color: var(--text-color-light); transition: background-color 0.3s, color 0.3s; }
        body.dark-mode { background-color: var(--bg-color-dark); color: var(--text-color-dark); }
        
        #map-container { height: 100%; width: 100%; position: absolute; top: 0; left: 0; z-index: 0; background-color: var(--map-bg-light); }
        body.dark-mode #map-container { background-color: var(--map-bg-dark); }
       
        .country-label { font-size: 11px; color: #1f2937; font-weight: 600; text-shadow: 0 0 2px rgba(255,255,255,0.8), 0 0 2px rgba(255,255,255,0.8); pointer-events: none; text-align: center; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; opacity: 0; transition: opacity 0.2s ease-in-out; }
        .country-label.visible { opacity: 0.9; }
        body.dark-mode .country-label { color: #e5e7eb; text-shadow: 0 0 2px rgba(0,0,0,0.7), 0 0 2px rgba(0,0,0,0.7); }
        
        .warhead-label { 
            font-size: 11px; 
            font-weight: bold; 
            color: #22c55e !important; 
            background-color: transparent !important; 
            padding: 1px 4px; 
            border-radius: 3px; 
            text-shadow: none !important; 
        }


        .leaflet-control-zoom { }
        .leaflet-control-attribution a { color: var(--header-text-light) !important; }
        body.dark-mode .leaflet-control-attribution a { color: var(--header-text-dark) !important; }

        .top-left-controls { position: fixed; top: 15px; left: 15px; z-index: 1000; display: flex; flex-direction: row; align-items: center; gap: 10px; background-color: rgba(255,255,255,0.7); padding: 8px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);}
        body.dark-mode .top-left-controls { background-color: rgba(40,50,60,0.7); }

        .top-left-controls button, .top-left-controls select { 
            background-color: var(--button-bg-light); 
            color: var(--button-text-light); 
            padding: 8px 12px; border-radius: 6px; 
            box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
            font-size: 0.9em; 
            transition: background-color 0.2s, color 0.2s, box-shadow 0.2s, border-color 0.2s; 
            border: 1px solid transparent; 
            cursor: pointer; 
        }
        .top-left-controls button:hover, .top-left-controls select:hover { 
            background-color: var(--button-hover-bg-light); 
            box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        }
        .top-left-controls button.active-control, .top-left-controls select.active-control {
            background-color: var(--button-active-bg-light);
            color: var(--button-active-text-light);
            font-weight: 600;
            border: 1px solid var(--button-active-border-light);
        }

        body.dark-mode .top-left-controls button, body.dark-mode .top-left-controls select { 
            background-color: var(--button-bg-dark); 
            color: var(--button-text-dark); 
        }
        body.dark-mode .top-left-controls button:hover, body.dark-mode .top-left-controls select:hover { 
            background-color: var(--button-hover-bg-dark); 
        }
        body.dark-mode .top-left-controls button.active-control, body.dark-mode .top-left-controls select.active-control {
            background-color: var(--button-active-bg-dark);
            color: var(--button-active-text-dark);
            border: 1px solid var(--button-active-border-dark);
        }

        .top-left-controls select { appearance: none; -webkit-appearance: none; -moz-appearance: none; padding-right: 30px; background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%231F2937%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E'); background-repeat: no-repeat; background-position: right 10px center; background-size: 10px; }
        body.dark-mode .top-left-controls select { background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23F3F4F6%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E');}

        #infoPanel { width: 340px; height: 100vh; position: fixed; top: 0; right: -340px; background-color: var(--panel-bg-light); color: var(--panel-text-light); box-shadow: -3px 0 15px rgba(0,0,0,0.15); padding: 20px; padding-top: 50px; overflow-y: auto; transition: right 0.3s ease-in-out, background-color 0.3s, color 0.3s; z-index: 1001; border-left: 1px solid var(--border-color-light); }
        body.dark-mode #infoPanel { background-color: var(--panel-bg-dark); color: var(--panel-text-dark); box-shadow: -3px 0 15px rgba(0,0,0,0.3); border-left: 1px solid var(--border-color-dark); }
        #infoPanel.active { right: 0; }
        #infoPanelClose { 
            position: sticky; 
            top: -10px; 
            float: right; 
            font-size: 28px; 
            font-weight: 300; 
            cursor: pointer; color: var(--panel-text-light); 
            transition: transform 0.2s ease;
            background-color: var(--panel-bg-light); 
            padding: 0px 5px 5px 10px; 
            border-radius: 0 0 0 5px;
            z-index: 1002; 
            margin-right: -10px; 
            margin-top: -10px; 
        }
        body.dark-mode #infoPanelClose { color: var(--panel-text-dark); background-color: var(--panel-bg-dark); }
        #infoPanelClose:hover { transform: scale(1.1); opacity: 0.8; }
        #infoPanel h2 { margin-top: 10px; margin-bottom: 15px; font-size: 1.3em; border-bottom: 1px solid var(--border-color-light); padding-bottom: 10px; color: var(--header-text-light); }
        body.dark-mode #infoPanel h2 { color: var(--header-text-dark); border-bottom: 1px solid var(--border-color-dark); }
        #infoPanelContent p { margin-bottom: 8px; line-height: 1.5; font-size: 0.9em; }
        #infoPanelContent strong { color: var(--header-text-light); }
        body.dark-mode #infoPanelContent strong { color: var(--header-text-dark); }
        body.dark-mode #infoPanelContent small em { color: #9ca3af; }
        #infoPanelContent ul { list-style: disc; padding-left: 20px; margin-top: 5px;}
        #infoPanelContent li { margin-bottom: 3px; font-size: 0.85em;}
        
        .theme-switch-wrapper { display: flex; align-items: center; background-color: var(--button-bg-light); padding: 5px 8px; border-radius: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        body.dark-mode .theme-switch-wrapper { background-color: var(--button-bg-dark); }
        .theme-switch-wrapper.active-control { background-color: var(--button-active-bg-light) !important; border: 1px solid var(--button-active-border-light) !important; } 
        body.dark-mode .theme-switch-wrapper.active-control { background-color: var(--button-active-bg-dark) !important; border: 1px solid var(--button-active-border-dark) !important;}

        .theme-switch { display: inline-block; height: 22px; position: relative; width: 44px; }
        .theme-switch input { display:none; }
        .slider { background-color: #ccc; bottom: 0; cursor: pointer; left: 0; position: absolute; right: 0; top: 0; transition: .4s; border-radius: 22px; }
        .slider:before { background-color: #fff; bottom: 2px; content: ""; height: 18px; left: 2px; position: absolute; transition: .4s; width: 18px; border-radius: 50%; }
        input:checked + .slider { background-color: #4338ca; } 
        input:checked + .slider:before { transform: translateX(22px); }
        .theme-switch-label { margin-left: 8px; font-size: 0.85em; color: var(--button-text-light); }
        body.dark-mode .theme-switch-label { color: var(--button-text-dark); }
        .theme-switch-wrapper.active-control .theme-switch-label { color: var(--button-active-text-light); }
        body.dark-mode .theme-switch-wrapper.active-control .theme-switch-label { color: var(--button-active-text-dark); }

        .leaflet-tooltip.country-hover-tooltip {
            background-color: rgba(255, 255, 255, 0.9);
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 8px;
            font-size: 0.85em;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        body.dark-mode .leaflet-tooltip.country-hover-tooltip {
            background-color: rgba(40, 50, 60, 0.9);
            color: #f0f0f0;
            border-color: #555;
        }
        .leaflet-tooltip.country-hover-tooltip strong {
            color: var(--header-text-light);
        }
        body.dark-mode .leaflet-tooltip.country-hover-tooltip strong {
            color: var(--header-text-dark);
        }
        .leaflet-tooltip.conflict-line-tooltip {
            background-color: rgba(50, 50, 50, 0.85);
            color: white;
            border: 1px solid #333;
            border-radius: 4px;
            padding: 6px 10px;
            font-size: 0.8em;
        }
        body.dark-mode .leaflet-tooltip.conflict-line-tooltip {
            background-color: rgba(220, 220, 220, 0.85);
            color: black;
            border-color: #aaa;
        }
        .triangle-marker {
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-bottom-width: 10px;
            border-bottom-style: solid;
        }
        .pentagon-marker {
            width: 12px; 
            height: 11px; 
            clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
        }
        .oval-marker {
            width: 15px; 
            height: 8px;  
            border-radius: 50%;
        }
        .chokepoint-x-marker {
            font-weight: bold;
            color: #808080; 
            text-shadow: 0 0 1px black; 
            display: flex;
            align-items: center;
            justify-content: center;
        }
        body.dark-mode .chokepoint-x-marker {
            color: #A9A9A9; 
            text-shadow: 0 0 1px black;
        }

    </style>
    <script>
      tailwind.config = { theme: { extend: { fontFamily: { sans: ['Inter', 'sans-serif'], } } } }
    </script>
</head>
<body class="">
    <div id="map-container"></div>

    <div class="top-left-controls"> 
        <select id="mainViewSelect">
            <option value="">View Options...</option>
            <option value="showAllRelations">Show All Relations</option>
            <option value="nuclear">Nuclear States</option>
            <option value="assets">Assets</option> 
            <option value="conflicts">Conflict Zones</option>
            <option value="blocs">Geopolitical Blocs</option>
            <option value="chokepoints">Strategic Chokepoints</option>
        </select>
        <select id="assetTypeSelect" style="display: none;">
            <option value="allBases">All Assets</option> 
            <option value="usAssets">US Assets</option>
            <option value="chinaAssets">China Assets</option>
            <option value="russiaAssets">Russia Assets</option>
            <option value="indiaAssets">India Assets</option>
            <option value="ukAssets">UK Assets</option>
            <option value="franceAssets">France Assets</option>
            <option value="italyAssets">Italy Assets</option>
            <option value="turkeyAssets">Turkey Assets</option>
            <option value="israelAssets">Israel Assets</option>
            <option value="iranAssets">Iran Assets</option>
        </select>
        <select id="conflictTypeSelect" style="display: none;">
            <option value="">Conflicts</option> 
            <option value="activeWar">Active Wars</option>
            <option value="exchangesOfFire">Exchanges of Fire</option>
            <option value="civilWarFailedState">Civil War/Failed State</option>
            <option value="potentialConflicts">Potential Conflicts</option>
            <option value="allConflicts">All Conflicts</option>
        </select>
        <select id="blocSelect" style="display: none;">
            <option value="">Blocs</option>
            <option value="NATO">NATO</option>
            <option value="BRICS">BRICS</option>
            <option value="EU">EU</option>
            <option value="CANZUK">CANZUK</option>
            <option value="SCO">SCO</option>
            <option value="GCC">GCC</option>
            <option value="G7">G7</option>
            <option value="G20">G20</option>
            <option value="UN">UN</option>
        </select>
        <div class="theme-switch-wrapper" id="themeSwitchWrapper">
            <label class="theme-switch" for="themeToggleCheckbox">
                <input type="checkbox" id="themeToggleCheckbox" />
                <div class="slider round"></div>
            </label>
            <span class="theme-switch-label">Dark Mode</span>
        </div>
    </div>

    <div id="infoPanel">
        <span id="infoPanelClose">&times;</span>
        <h2 id="infoPanelTitle">Information</h2>
        <div id="infoPanelContent">
            <p>Click on a country or select a view to see details.</p>
        </div>
    </div>

    <script>
        // DOM Elements
        const mainViewSelect = document.getElementById('mainViewSelect');
        const assetTypeSelect = document.getElementById('assetTypeSelect');
        const blocSelect = document.getElementById('blocSelect');
        const conflictTypeSelect = document.getElementById('conflictTypeSelect');
        const infoPanel = document.getElementById('infoPanel');
        const infoPanelTitle = document.getElementById('infoPanelTitle');
        const infoPanelContent = document.getElementById('infoPanelContent');
        const infoPanelClose = document.getElementById('infoPanelClose');
        const themeToggle = document.getElementById('themeToggleCheckbox');
        const themeSwitchWrapper = document.getElementById('themeSwitchWrapper');


        // Leaflet Map Instance & Layers
        let leafletMap;
        let lightTileLayer, darkTileLayer;
        let countryGeoJsonLayer;
        let countryPolygonLayers = {}; 
        let countryLabels = {}; 
        let leafletRelationsLines = {};
        let conflictLinesGroup = L.layerGroup(); 
        let nuclearWarheadMarkersGroup = L.layerGroup();
        let usBasesMarkersGroup = L.layerGroup();
        let chinaBasesMarkersGroup = L.layerGroup();
        let russiaBasesMarkersGroup = L.layerGroup();
        let iranBasesMarkersGroup = L.layerGroup(); // For Iran's state bases
        let iranProxiesMarkersGroup = L.layerGroup(); // For Iran's proxies (separate from state bases)
        let usCarriersMarkersGroup = L.layerGroup();
        let usSubmarinesMarkersGroup = L.layerGroup();
        let chinaCarriersMarkersGroup = L.layerGroup();
        let chinaSubmarinesMarkersGroup = L.layerGroup();
        let russiaCarriersMarkersGroup = L.layerGroup(); 
        let russiaSubmarinesMarkersGroup = L.layerGroup();
        let indiaBasesMarkersGroup = L.layerGroup();
        let indiaCarriersMarkersGroup = L.layerGroup();
        let indiaSubmarinesMarkersGroup = L.layerGroup();
        let ukBasesMarkersGroup = L.layerGroup();
        let ukCarriersMarkersGroup = L.layerGroup();
        let ukSubmarinesMarkersGroup = L.layerGroup();
        let franceBasesMarkersGroup = L.layerGroup();
        let franceCarriersMarkersGroup = L.layerGroup();
        let franceSubmarinesMarkersGroup = L.layerGroup();
        let italyBasesMarkersGroup = L.layerGroup();
        let italyCarriersMarkersGroup = L.layerGroup();
        let italySubmarinesMarkersGroup = L.layerGroup();
        let turkeyBasesMarkersGroup = L.layerGroup();
        let turkeyCarriersMarkersGroup = L.layerGroup();
        let turkeySubmarinesMarkersGroup = L.layerGroup();
        let israelBasesMarkersGroup = L.layerGroup();
        let israelSubmarinesMarkersGroup = L.layerGroup();
        let chokepointsMarkersGroup = L.layerGroup();


        // Selection State
        let firstSelectedCountryCode = null;
        let secondSelectedCountryCode = null;
        let selectedBloc = null; 
        let activeConflictFilter = null;
        let nuclearViewActive = false;
        let assetsViewActive = false; 
        let chokepointsViewActive = false;
        let currentAssetType = 'allBases'; 


        // Helper to get computed style for CSS variables
        function getCssVariable(variableName) {
            return getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();
        }

        // Polygon Styles for Leaflet
        const defaultLeafletPolygonStyle = () => ({ weight: 0, opacity: 0, fillOpacity: 0 });
        const highlightedLeafletPolygonStyle = () => ({ 
            fillColor: getCssVariable(document.body.classList.contains('dark-mode') ? '--country-highlight-fill-dark' : '--country-highlight-fill-light'),
            weight: 2, opacity: 1,
            color: getCssVariable(document.body.classList.contains('dark-mode') ? '--country-highlight-border-dark' : '--country-highlight-border-light'),
            fillOpacity: 0.7
        });
         const chinaHighlightStyle = () => ({ 
            fillColor: getCssVariable('--china-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--china-highlight-border'), 
            fillOpacity: 0.7 
        });
        const russiaHighlightStyle = () => ({ 
            fillColor: getCssVariable('--russia-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--russia-highlight-border'), 
            fillOpacity: 0.7 
        });
         const iranHighlightStyle = () => ({ 
            fillColor: getCssVariable('--iran-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--iran-highlight-border'), 
            fillOpacity: 0.7 
        });
         const indiaHighlightStyle = () => ({ 
            fillColor: getCssVariable('--india-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--india-highlight-border'), 
            fillOpacity: 0.7 
        });
        const ukHighlightStyle = () => ({ 
            fillColor: getCssVariable('--uk-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--uk-highlight-border'), 
            fillOpacity: 0.7 
        });
        const franceHighlightStyle = () => ({ 
            fillColor: getCssVariable('--france-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--france-highlight-border'), 
            fillOpacity: 0.7 
        });
        const italyHighlightStyle = () => ({ 
            fillColor: getCssVariable('--italy-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--italy-highlight-border'), 
            fillOpacity: 0.7 
        });
        const turkeyHighlightStyle = () => ({ 
            fillColor: getCssVariable('--turkey-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--turkey-highlight-border'), 
            fillOpacity: 0.7 
        });
        const israelHighlightStyle = () => ({ 
            fillColor: getCssVariable('--israel-highlight-fill'), 
            weight: 2, opacity: 1, 
            color: getCssVariable('--israel-highlight-border'), 
            fillOpacity: 0.7 
        });
        const rivalCountryHighlightStyle = () => ({
            fillColor: getCssVariable('--rival-country-fill'),
            weight: 1, opacity: 1,
            color: getCssVariable('--rival-country-border'),
            fillOpacity: 0.5
        });
        const blocHighlightStyle = () => ({
            fillColor: getCssVariable(document.body.classList.contains('dark-mode') ? '--bloc-highlight-fill-dark' : '--bloc-highlight-fill-light'),
            weight: 1.5, opacity: 1,
            color: getCssVariable(document.body.classList.contains('dark-mode') ? '--bloc-highlight-border-dark' : '--bloc-highlight-border-light'),
            fillOpacity: 0.6
        });
        const conflictStyleRed = () => ({ 
            fillColor: getCssVariable('--conflict-red-fill'), 
            weight: 1.5, opacity: 1, 
            color: getCssVariable('--conflict-red-border'), 
            fillOpacity: 0.6 
        });
        const conflictStyleBrown = () => ({ 
            fillColor: getCssVariable('--conflict-brown-fill'), 
            weight: 1.5, opacity: 1, 
            color: getCssVariable('--conflict-brown-border'), 
            fillOpacity: 0.6 
        });
        const conflictStyleOrange = () => ({ 
            fillColor: getCssVariable('--conflict-orange-fill'), 
            weight: 1.5, opacity: 1, 
            color: getCssVariable('--conflict-orange-border'), 
            fillOpacity: 0.6 
        });
         const conflictStyleYellow = () => ({ 
            fillColor: getCssVariable('--conflict-yellow-fill'), 
            weight: 1.5, opacity: 1, 
            color: getCssVariable('--conflict-yellow-border'), 
            fillOpacity: 0.5 
        });
        const nuclearDeclaredStyle = () => ({ fillColor: getCssVariable('--nuclear-declared-fill'), weight: 1.5, opacity: 1, color: getCssVariable('--nuclear-declared-border'), fillOpacity: 0.6 });
        const nuclearNonNPTStyle = () => ({ fillColor: getCssVariable('--nuclear-nonnpt-fill'), weight: 1.5, opacity: 1, color: getCssVariable('--nuclear-nonnpt-border'), fillOpacity: 0.6 });
        const nuclearThresholdStyle = () => ({ fillColor: getCssVariable('--nuclear-threshold-fill'), weight: 1.5, opacity: 1, color: getCssVariable('--nuclear-threshold-border'), fillOpacity: 0.5 });
        
        // Data: Countries
        const countries = {
            "AFG": { "name": "Afghanistan", "latitude": 33.9391, "longitude": 67.7100, "capital": "Kabul", "population": "40.1M (UN 2021)", "language": "Pashto, Dari", "economyGDP": "$14.5B (WB 2021)", "economySource": "UN/IMF" },
            "ALB": { "name": "Albania", "latitude": 41.1533, "longitude": 20.1683, "capital": "Tirana", "population": "2.8M", "language": "Albanian", "economyGDP": "$21B", "economySource": "IMF 2023 est." },
            "DZA": { "name": "Algeria", "latitude": 28.0339, "longitude": 1.6596, "capital": "Algiers", "population": "44.2M", "language": "Arabic, Berber", "economyGDP": "$195B", "economySource": "WB/IMF 2023" },
            "AND": { "name": "Andorra", "latitude": 42.5063, "longitude": 1.5218, "capital": "Andorra la Vella", "population": "0.08M", "language": "Catalan", "economyGDP": "$3.3B", "economySource": "UN 2022" },
            "AGO": { "name": "Angola", "latitude": -11.2027, "longitude": 17.8739, "capital": "Luanda", "population": "35.6M", "language": "Portuguese", "economyGDP": "$124B", "economySource": "IMF 2023 est." },
            "ATG": { "name": "Antigua and Barbuda", "latitude": 17.0608, "longitude": -61.7964, "capital": "St. John's", "population": "0.1M", "language": "English", "economyGDP": "$1.8B", "economySource": "IMF 2023 est." },
            "ARG": { "name": "Argentina", "latitude": -38.4161, "longitude": -63.6167, "capital": "Buenos Aires", "population": "46.2M", "language": "Spanish", "economyGDP": "$631B", "economySource": "WB/IMF 2023" },
            "ARM": { "name": "Armenia", "latitude": 40.0691, "longitude": 45.0382, "capital": "Yerevan", "population": "3.0M", "language": "Armenian", "economyGDP": "$19.5B", "economySource": "IMF 2023 est." },
            "AUS": { "name": "Australia", "latitude": -25.2744, "longitude": 133.7751, "capital": "Canberra", "population": "27.4M", "language": "English", "economyGDP": "$1.85T", "economySource": "IMF 2025 est." },
            "AUT": { "name": "Austria", "latitude": 47.5162, "longitude": 14.5501, "capital": "Vienna", "population": "9.0M", "language": "German", "economyGDP": "$520B", "economySource": "WB/IMF 2023" },
            "AZE": { "name": "Azerbaijan", "latitude": 40.1431, "longitude": 47.5769, "capital": "Baku", "population": "10.4M", "language": "Azerbaijani", "economyGDP": "$77.5B", "economySource": "IMF 2023 est." },
            "BHS": { "name": "Bahamas", "latitude": 25.0343, "longitude": -77.3963, "capital": "Nassau", "population": "0.4M", "language": "English", "economyGDP": "$13.6B", "economySource": "IMF 2023 est." },
            "BHR": { "name": "Bahrain", "latitude": 26.0667, "longitude": 50.5577, "capital": "Manama", "population": "1.5M", "language": "Arabic", "economyGDP": "$44B", "economySource": "IMF 2023 est." },
            "BGD": { "name": "Bangladesh", "latitude": 23.6850, "longitude": 90.3563, "capital": "Dhaka", "population": "170.8M", "language": "Bengali", "economyGDP": "$455B", "economySource": "IMF 2023 est." },
            "BRB": { "name": "Barbados", "latitude": 13.1939, "longitude": -59.5432, "capital": "Bridgetown", "population": "0.3M", "language": "English", "economyGDP": "$6.1B", "economySource": "IMF 2023 est." },
            "BLR": { "name": "Belarus", "latitude": 53.7098, "longitude": 27.9534, "capital": "Minsk", "population": "9.2M", "language": "Belarusian, Russian", "economyGDP": "$73B", "economySource": "IMF 2023 est." },
            "BEL": { "name": "Belgium", "latitude": 50.5039, "longitude": 4.4699, "capital": "Brussels", "population": "11.7M", "language": "Dutch, French, German", "economyGDP": "$0.63T", "economySource": "IMF 2024 est."},
            "BLZ": { "name": "Belize", "latitude": 17.1899, "longitude": -88.4976, "capital": "Belmopan", "population": "0.4M", "language": "English", "economyGDP": "$2.8B", "economySource": "IMF 2023 est." },
            "BEN": { "name": "Benin", "latitude": 9.3077, "longitude": 2.3158, "capital": "Porto-Novo", "population": "13.4M", "language": "French", "economyGDP": "$19B", "economySource": "IMF 2023 est." },
            "BTN": { "name": "Bhutan", "latitude": 27.5142, "longitude": 90.4336, "capital": "Thimphu", "population": "0.8M", "language": "Dzongkha", "economyGDP": "$2.8B", "economySource": "IMF 2023 est." },
            "BOL": { "name": "Bolivia", "latitude": -16.2902, "longitude": -63.5887, "capital": "Sucre (constitutional)", "population": "12.2M", "language": "Spanish, Quechua, Aymara", "economyGDP": "$45B", "economySource": "IMF 2023 est." },
            "BIH": { "name": "Bosnia and Herzegovina", "latitude": 43.9159, "longitude": 17.6791, "capital": "Sarajevo", "population": "3.2M", "language": "Bosnian, Croatian, Serbian", "economyGDP": "$26B", "economySource": "IMF 2023 est." },
            "BWA": { "name": "Botswana", "latitude": -22.3285, "longitude": 24.6849, "capital": "Gaborone", "population": "2.6M", "language": "English, Tswana", "economyGDP": "$20B", "economySource": "IMF 2023 est." },
            "BRA": { "name": "Brazil", "latitude": -14.2350, "longitude": -51.9253, "capital": "Brasília", "population": "212.5M", "language": "Portuguese", "economyGDP": "$2.31T", "economySource": "IMF/Wiki 2025" },
            "BRN": { "name": "Brunei Darussalam", "latitude": 4.5353, "longitude": 114.7277, "capital": "Bandar Seri Begawan", "population": "0.4M", "language": "Malay", "economyGDP": "$15B", "economySource": "IMF 2023 est." },
            "BGR": { "name": "Bulgaria", "latitude": 42.7339, "longitude": 25.4858, "capital": "Sofia", "population": "6.5M", "language": "Bulgarian", "economyGDP": "$100B", "economySource": "IMF 2023 est." },
            "BFA": { "name": "Burkina Faso", "latitude": 12.2383, "longitude": -1.5616, "capital": "Ouagadougou", "population": "22.1M (UN est.)", "language": "French", "economyGDP": "$19.7B (IMF 2022 est.)", "economySource": "UN/IMF" },
            "BDI": { "name": "Burundi", "latitude": -3.3731, "longitude": 29.9189, "capital": "Gitega (political)", "population": "12.9M", "language": "Kirundi, French, English", "economyGDP": "$3.3B", "economySource": "IMF 2023 est." },
            "CPV": { "name": "Cabo Verde", "latitude": 16.5388, "longitude": -23.0418, "capital": "Praia", "population": "0.6M", "language": "Portuguese", "economyGDP": "$2.3B", "economySource": "IMF 2023 est." },
            "KHM": { "name": "Cambodia", "latitude": 12.5657, "longitude": 104.9910, "capital": "Phnom Penh", "population": "16.8M", "language": "Khmer", "economyGDP": "$30B", "economySource": "IMF 2023 est." },
            "CMR": { "name": "Cameroon", "latitude": 7.3697, "longitude": 12.3547, "capital": "Yaoundé", "population": "27.9M", "language": "French, English", "economyGDP": "$47B", "economySource": "IMF 2023 est." },
            "CAN": { "name": "Canada", "latitude": 56.1304, "longitude": -106.3468, "capital": "Ottawa", "population": "41.5M", "language": "English, French", "economyGDP": "$2.38T", "economySource": "IMF 2025 est." },
            "CAF": { "name": "Central African Republic", "latitude": 6.6111, "longitude": 20.9394, "capital": "Bangui", "population": "5.5M (UN est.)", "language": "French, Sango", "economyGDP": "$2.5B (IMF 2022 est.)", "economySource": "UN/IMF" },
            "TCD": { "name": "Chad", "latitude": 15.4542, "longitude": 18.7322, "capital": "N'Djamena", "population": "17.7M", "language": "French, Arabic", "economyGDP": "$12B", "economySource": "IMF 2023 est." },
            "CHL": { "name": "Chile", "latitude": -35.6751, "longitude": -71.5430, "capital": "Santiago", "population": "19.6M", "language": "Spanish", "economyGDP": "$0.35T", "economySource": "IMF 2024 est." },
            "CHN": { "name": "China", "latitude": 35.8617, "longitude": 104.1954, "capital": "Beijing", "population": "1.408B", "language": "Mandarin", "economyGDP": "$19.23T", "economySource": "IMF/Wiki 2025" },
            "COL": { "name": "Colombia", "latitude": 4.5709, "longitude": -74.2973, "capital": "Bogotá", "population": "51.9M", "language": "Spanish", "economyGDP": "$363B", "economySource": "WB/IMF 2023" },
            "COM": { "name": "Comoros", "latitude": -11.8750, "longitude": 43.8722, "capital": "Moroni", "population": "0.8M", "language": "Comorian, French, Arabic", "economyGDP": "$1.3B", "economySource": "IMF 2023 est." },
            "COG": { "name": "Congo (Rep. of the)", "latitude": -0.2280, "longitude": 15.8277, "capital": "Brazzaville", "population": "5.8M", "language": "French", "economyGDP": "$15B", "economySource": "IMF 2023 est." },
            "CRI": { "name": "Costa Rica", "latitude": 9.7489, "longitude": -83.7534, "capital": "San José", "population": "5.2M", "language": "Spanish", "economyGDP": "$76B", "economySource": "IMF 2023 est." },
            "CIV": { "name": "Côte d'Ivoire", "latitude": 7.5400, "longitude": -5.5471, "capital": "Yamoussoukro (political)", "population": "28.2M", "language": "French", "economyGDP": "$77B", "economySource": "IMF 2023 est." },
            "HRV": { "name": "Croatia", "latitude": 45.1000, "longitude": 15.2000, "capital": "Zagreb", "population": "3.8M", "language": "Croatian", "economyGDP": "$80B", "economySource": "IMF 2023 est." },
            "CUB": { "name": "Cuba", "latitude": 21.5218, "longitude": -77.7812, "capital": "Havana", "population": "11.1M", "language": "Spanish", "economyGDP": "$100B (approx est.)", "economySource": "Various est." },
            "CYP": { "name": "Cyprus", "latitude": 35.1264, "longitude": 33.4299, "capital": "Nicosia", "population": "1.2M", "language": "Greek, Turkish", "economyGDP": "$32B", "economySource": "IMF 2023 est."},
            "CZE": { "name": "Czech Republic", "latitude": 49.8175, "longitude": 15.4730, "capital": "Prague", "population": "10.5M", "language": "Czech", "economyGDP": "$0.34T", "economySource": "IMF 2024 est."},
            "COD": { "name": "DR Congo", "latitude": -4.0383, "longitude": 21.7587, "capital": "Kinshasa", "population": "99.0M (UN est.)", "language": "French", "economyGDP": "$64.7B (IMF 2022 est.)", "economySource": "UN/IMF" },
            "DNK": { "name": "Denmark", "latitude": 56.2639, "longitude": 9.5018, "capital": "Copenhagen", "population": "5.9M", "language": "Danish", "economyGDP": "$405B", "economySource": "WB/IMF 2023" },
            "DJI": { "name": "Djibouti", "latitude": 11.8251, "longitude": 42.5903, "capital": "Djibouti", "population": "1.1M", "language": "French, Arabic", "economyGDP": "$4B", "economySource": "IMF 2023 est." },
            "DMA": { "name": "Dominica", "latitude": 15.4150, "longitude": -61.3710, "capital": "Roseau", "population": "0.07M", "language": "English", "economyGDP": "$0.6B", "economySource": "IMF 2023 est." },
            "DOM": { "name": "Dominican Republic", "latitude": 18.7357, "longitude": -70.1627, "capital": "Santo Domingo", "population": "11.2M", "language": "Spanish", "economyGDP": "$120B", "economySource": "IMF 2023 est." },
            "ECU": { "name": "Ecuador", "latitude": -1.8312, "longitude": -78.1834, "capital": "Quito", "population": "18.0M", "language": "Spanish", "economyGDP": "$115B", "economySource": "IMF 2023 est." },
            "EGY": { "name": "Egypt", "latitude": 26.8206, "longitude": 30.8025, "capital": "Cairo", "population": "109.5M", "language": "Arabic", "economyGDP": "$347.3B", "economySource": "IMF/Wiki 2025" },
            "SLV": { "name": "El Salvador", "latitude": 13.7942, "longitude": -88.8965, "capital": "San Salvador", "population": "6.3M", "language": "Spanish", "economyGDP": "$33B", "economySource": "IMF 2023 est." },
            "GNQ": { "name": "Equatorial Guinea", "latitude": 1.6508, "longitude": 10.2679, "capital": "Malabo", "population": "1.7M", "language": "Spanish, French, Portuguese", "economyGDP": "$11B", "economySource": "IMF 2023 est." },
            "ERI": { "name": "Eritrea", "latitude": 15.1794, "longitude": 39.7823, "capital": "Asmara", "population": "3.7M", "language": "Tigrinya, Arabic, English", "economyGDP": "$2.1B", "economySource": "IMF 2023 est." },
            "EST": { "name": "Estonia", "latitude": 58.5953, "longitude": 25.0136, "capital": "Tallinn", "population": "1.3M", "language": "Estonian", "economyGDP": "$41B", "economySource": "IMF 2023 est." },
            "SWZ": { "name": "Eswatini", "latitude": -26.5225, "longitude": 31.4659, "capital": "Mbabane (administrative)", "population": "1.2M", "language": "Swazi, English", "economyGDP": "$4.8B", "economySource": "IMF 2023 est." },
            "ETH": { "name": "Ethiopia", "latitude": 9.1450, "longitude": 40.4897, "capital": "Addis Ababa", "population": "123.4M", "language": "Amharic", "economyGDP": "$156B", "economySource": "IMF 2023 est." },
            "FJI": { "name": "Fiji", "latitude": -17.7134, "longitude": 178.0650, "capital": "Suva", "population": "0.9M", "language": "English, Fijian, Hindi", "economyGDP": "$5.5B", "economySource": "IMF 2023 est." },
            "FIN": { "name": "Finland", "latitude": 61.9241, "longitude": 25.7482, "capital": "Helsinki", "population": "5.6M", "language": "Finnish, Swedish", "economyGDP": "$303B", "economySource": "WB/IMF 2023" },
            "FRA": { "name": "France", "latitude": 46.2276, "longitude": 2.2137, "capital": "Paris", "population": "68.6M", "language": "French", "economyGDP": "$3.17T", "economySource": "IMF/Wiki 2024/25" },
            "GAB": { "name": "Gabon", "latitude": -0.8037, "longitude": 11.6094, "capital": "Libreville", "population": "2.4M", "language": "French", "economyGDP": "$21B", "economySource": "IMF 2023 est." },
            "GMB": { "name": "Gambia", "latitude": 13.4432, "longitude": -15.3101, "capital": "Banjul", "population": "2.7M", "language": "English", "economyGDP": "$2.3B", "economySource": "IMF 2023 est." },
            "GEO": { "name": "Georgia", "latitude": 42.3154, "longitude": 43.3569, "capital": "Tbilisi", "population": "3.7M", "language": "Georgian", "economyGDP": "$27B", "economySource": "IMF 2023 est." },
            "DEU": { "name": "Germany", "latitude": 51.1657, "longitude": 10.4515, "capital": "Berlin", "population": "83.4M", "language": "German", "economyGDP": "$4.75T", "economySource": "IMF/Wiki 2024/25" },
            "GHA": { "name": "Ghana", "latitude": 7.9465, "longitude": -1.0232, "capital": "Accra", "population": "33.5M", "language": "English", "economyGDP": "$75B", "economySource": "IMF 2023 est." },
            "GRC": { "name": "Greece", "latitude": 39.0742, "longitude": 21.8243, "capital": "Athens", "population": "10.4M", "language": "Greek", "economyGDP": "$223B", "economySource": "WB/IMF 2023" },
            "GRD": { "name": "Grenada", "latitude": 12.1165, "longitude": -61.6790, "capital": "St. George's", "population": "0.1M", "language": "English", "economyGDP": "$1.2B", "economySource": "IMF 2023 est." },
            "GTM": { "name": "Guatemala", "latitude": 15.7835, "longitude": -90.2308, "capital": "Guatemala City", "population": "17.6M", "language": "Spanish", "economyGDP": "$95B", "economySource": "IMF 2023 est." },
            "GIN": { "name": "Guinea", "latitude": 9.9456, "longitude": -9.6966, "capital": "Conakry", "population": "13.5M", "language": "French", "economyGDP": "$21B", "economySource": "IMF 2023 est." },
            "GNB": { "name": "Guinea-Bissau", "latitude": 11.8037, "longitude": -15.1804, "capital": "Bissau", "population": "2.1M", "language": "Portuguese", "economyGDP": "$1.7B", "economySource": "IMF 2023 est." },
            "GUY": { "name": "Guyana", "latitude": 4.8604, "longitude": -58.9302, "capital": "Georgetown", "population": "0.8M", "language": "English", "economyGDP": "$16B", "economySource": "IMF 2023 est." },
            "HTI": { "name": "Haiti", "latitude": 18.9712, "longitude": -72.2852, "capital": "Port-au-Prince", "population": "11.4M (UN est.)", "language": "French, Haitian Creole", "economyGDP": "$20.2B (IMF 2022 est.)", "economySource": "UN/IMF" },
            "VAT": { "name": "Holy See (Vatican City)", "latitude": 41.9029, "longitude": 12.4534, "capital": "Vatican City", "population": "0.0008M", "language": "Italian, Latin", "economyGDP": "N/A", "economySource": "N/A" },
            "HND": { "name": "Honduras", "latitude": 15.2000, "longitude": -86.2419, "capital": "Tegucigalpa", "population": "10.5M", "language": "Spanish", "economyGDP": "$32B", "economySource": "IMF 2023 est." },
            "HUN": { "name": "Hungary", "latitude": 47.1625, "longitude": 19.5033, "capital": "Budapest", "population": "9.7M", "language": "Hungarian", "economyGDP": "$198B", "economySource": "WB/IMF 2023" },
            "ISL": { "name": "Iceland", "latitude": 64.9631, "longitude": -19.0208, "capital": "Reykjavik", "population": "0.4M", "language": "Icelandic", "economyGDP": "$30B", "economySource": "IMF 2023 est." },
            "IND": { "name": "India", "latitude": 20.5937, "longitude": 78.9629, "capital": "New Delhi", "population": "1.428B", "language": "Hindi, English", "economyGDP": "$4.19T", "economySource": "IMF/Wiki 2025" },
            "IDN": { "name": "Indonesia", "latitude": -0.7893, "longitude": 113.9213, "capital": "Jakarta", "population": "275.5M", "language": "Indonesian", "economyGDP": "$1.39T", "economySource": "WB/IMF 2023" },
            "IRN": { "name": "Iran", "latitude": 32.4279, "longitude": 53.6880, "capital": "Tehran", "population": "89.3M", "language": "Persian", "economyGDP": "$0.376T", "economySource": "IMF 2025 est." },
            "IRQ": { "name": "Iraq", "latitude": 33.2232, "longitude": 43.6793, "capital": "Baghdad", "population": "45.5M", "language": "Arabic, Kurdish", "economyGDP": "$258.0B", "economySource": "IMF 2025 est." },
            "IRL": { "name": "Ireland", "latitude": 53.1424, "longitude": -7.6921, "capital": "Dublin", "population": "5.1M", "language": "Irish, English", "economyGDP": "$564B", "economySource": "WB/IMF 2023" },
            "ISR": { "name": "Israel", "latitude": 31.0461, "longitude": 34.8516, "capital": "Jerusalem", "population": "9.8M", "language": "Hebrew", "economyGDP": "$0.572T", "economySource": "IMF 2025 est." },
            "ITA": { "name": "Italy", "latitude": 41.8719, "longitude": 12.5674, "capital": "Rome", "population": "58.9M", "language": "Italian", "economyGDP": "$2.17T", "economySource": "WB/IMF 2023" },
            "JAM": { "name": "Jamaica", "latitude": 18.1096, "longitude": -77.2975, "capital": "Kingston", "population": "2.8M", "language": "English", "economyGDP": "$17B", "economySource": "IMF 2023 est." },
            "JPN": { "name": "Japan", "latitude": 36.2048, "longitude": 138.2529, "capital": "Tokyo", "population": "123.2M", "language": "Japanese", "economyGDP": "$4.29T", "economySource": "IMF 2025 est." },
            "JOR": { "name": "Jordan", "latitude": 30.5852, "longitude": 36.2384, "capital": "Amman", "population": "11.3M", "language": "Arabic", "economyGDP": "$52.0B", "economySource": "IMF 2023 est." },
            "KAZ": { "name": "Kazakhstan", "latitude": 48.0196, "longitude": 66.9237, "capital": "Astana", "population": "19.6M", "language": "Kazakh, Russian", "economyGDP": "$259B", "economySource": "IMF 2023 est." },
            "KEN": { "name": "Kenya", "latitude": -0.0236, "longitude": 37.9062, "capital": "Nairobi", "population": "53.0M", "language": "Swahili, English", "economyGDP": "$120B", "economySource": "IMF 2023 est." },
            "KIR": { "name": "Kiribati", "latitude": -3.3704, "longitude": -168.7340, "capital": "South Tarawa", "population": "0.1M", "language": "English, Gilbertese", "economyGDP": "$0.2B", "economySource": "IMF 2023 est." },
            "PRK": { "name": "North Korea", "latitude": 40.3399, "longitude": 127.5101, "capital": "Pyongyang", "population": "26M", "language": "Korean", "economyGDP": "N/A", "economySource": "Estimates vary" },
            "KOR": { "name": "South Korea", "latitude": 35.9078, "longitude": 127.7669, "capital": "Seoul", "population": "51.8M", "language": "Korean", "economyGDP": "$1.78T", "economySource": "WB/IMF 2023" },
            "XKX": { "name": "Kosovo", "latitude": 42.6026, "longitude": 20.9030, "capital": "Pristina", "population": "1.8M", "language": "Albanian, Serbian", "economyGDP": "$10B", "economySource": "IMF 2023 est." }, 
            "KWT": { "name": "Kuwait", "latitude": 29.3117, "longitude": 47.4818, "capital": "Kuwait City", "population": "4.3M", "language": "Arabic", "economyGDP": "$159.7B", "economySource": "IMF 2023 est." },
            "KGZ": { "name": "Kyrgyzstan", "latitude": 41.2044, "longitude": 74.7661, "capital": "Bishkek", "population": "6.7M", "language": "Kyrgyz, Russian", "economyGDP": "$12B", "economySource": "IMF 2023 est." },
            "LAO": { "name": "Laos", "latitude": 19.8563, "longitude": 102.4955, "capital": "Vientiane", "population": "7.5M", "language": "Lao", "economyGDP": "$19B", "economySource": "IMF 2023 est." },
            "LVA": { "name": "Latvia", "latitude": 56.8796, "longitude": 24.6032, "capital": "Riga", "population": "1.8M", "language": "Latvian", "economyGDP": "$46B", "economySource": "IMF 2023 est." },
            "LBN": { "name": "Lebanon", "latitude": 33.8547, "longitude": 35.8623, "capital": "Beirut", "population": "5.5M", "language": "Arabic", "economyGDP": "$23.1B", "economySource": "IMF 2023 est." },
            "LSO": { "name": "Lesotho", "latitude": -29.6100, "longitude": 28.2336, "capital": "Maseru", "population": "2.3M", "language": "Sesotho, English", "economyGDP": "$2.2B", "economySource": "IMF 2023 est." },
            "LBR": { "name": "Liberia", "latitude": 6.4281, "longitude": -9.4295, "capital": "Monrovia", "population": "5.3M", "language": "English", "economyGDP": "$4B", "economySource": "IMF 2023 est." },
            "LBY": { "name": "Libya", "latitude": 26.3351, "longitude": 17.2283, "capital": "Tripoli", "population": "6.8M", "language": "Arabic", "economyGDP": "$40B (Highly volatile)", "economySource": "IMF/WB est." },
            "LIE": { "name": "Liechtenstein", "latitude": 47.1660, "longitude": 9.5554, "capital": "Vaduz", "population": "0.04M", "language": "German", "economyGDP": "$7.1B", "economySource": "UN 2021" },
            "LTU": { "name": "Lithuania", "latitude": 55.1694, "longitude": 23.8813, "capital": "Vilnius", "population": "2.8M", "language": "Lithuanian", "economyGDP": "$78B", "economySource": "IMF 2023 est." },
            "LUX": { "name": "Luxembourg", "latitude": 49.8153, "longitude": 6.1296, "capital": "Luxembourg City", "population": "0.6M", "language": "Luxembourgish, French, German", "economyGDP": "$91B", "economySource": "IMF 2023 est." },
            "MDG": { "name": "Madagascar", "latitude": -18.7669, "longitude": 46.8691, "capital": "Antananarivo", "population": "29.6M", "language": "Malagasy, French", "economyGDP": "$16B", "economySource": "IMF 2023 est." },
            "MWI": { "name": "Malawi", "latitude": -13.2543, "longitude": 34.3015, "capital": "Lilongwe", "population": "20.4M", "language": "English, Chichewa", "economyGDP": "$13B", "economySource": "IMF 2023 est." },
            "MYS": { "name": "Malaysia", "latitude": 4.2105, "longitude": 101.9758, "capital": "Kuala Lumpur", "population": "33.1M", "language": "Malay", "economyGDP": "$430B", "economySource": "WB/IMF 2023" },
            "MDV": { "name": "Maldives", "latitude": 3.2028, "longitude": 73.2207, "capital": "Malé", "population": "0.5M", "language": "Dhivehi", "economyGDP": "$6.5B", "economySource": "IMF 2023 est." },
            "MLI": { "name": "Mali", "latitude": 17.5707, "longitude": -3.9962, "capital": "Bamako", "population": "21.9M (UN est.)", "language": "French", "economyGDP": "$18.8B (IMF 2022 est.)", "economySource": "UN/IMF" },
            "MLT": { "name": "Malta", "latitude": 35.9375, "longitude": 14.5000, "capital": "Valletta", "population": "0.5M", "language": "Maltese, English", "economyGDP": "$19B", "economySource": "IMF 2023 est." },
            "MHL": { "name": "Marshall Islands", "latitude": 7.1315, "longitude": 171.1845, "capital": "Majuro", "population": "0.04M", "language": "Marshallese, English", "economyGDP": "$0.28B", "economySource": "IMF 2023 est." },
            "MRT": { "name": "Mauritania", "latitude": 21.0079, "longitude": 10.9408, "capital": "Nouakchott", "population": "4.7M", "language": "Arabic, French", "economyGDP": "$10B", "economySource": "IMF 2023 est." },
            "MUS": { "name": "Mauritius", "latitude": -20.3484, "longitude": 57.5522, "capital": "Port Louis", "population": "1.3M", "language": "English, French", "economyGDP": "$13B", "economySource": "IMF 2023 est." },
            "MEX": { "name": "Mexico", "latitude": 23.6345, "longitude": -102.5528, "capital": "Mexico City", "population": "127.5M", "language": "Spanish", "economyGDP": "$1.81T", "economySource": "WB/IMF 2023" },
            "FSM": { "name": "Micronesia (Federated States of)", "latitude": 7.4256, "longitude": 150.5508, "capital": "Palikir", "population": "0.1M", "language": "English", "economyGDP": "$0.4B", "economySource": "IMF 2023 est." },
            "MDA": { "name": "Moldova", "latitude": 47.4116, "longitude": 28.3699, "capital": "Chișinău", "population": "2.5M", "language": "Romanian", "economyGDP": "$15B", "economySource": "IMF 2023 est." },
            "MCO": { "name": "Monaco", "latitude": 43.7384, "longitude": 7.4246, "capital": "Monaco", "population": "0.04M", "language": "French", "economyGDP": "$8.6B", "economySource": "World Bank 2021" },
            "MNG": { "name": "Mongolia", "latitude": 46.8625, "longitude": 103.8467, "capital": "Ulaanbaatar", "population": "3.4M", "language": "Mongolian", "economyGDP": "$17B", "economySource": "IMF 2023 est." },
            "MNE": { "name": "Montenegro", "latitude": 42.7087, "longitude": 19.3744, "capital": "Podgorica", "population": "0.6M", "language": "Montenegrin", "economyGDP": "$7B", "economySource": "IMF 2023 est." },
            "MAR": { "name": "Morocco", "latitude": 31.7917, "longitude": -7.0926, "capital": "Rabat", "population": "37.5M", "language": "Arabic, Berber", "economyGDP": "$130B", "economySource": "WB/IMF 2023" },
            "MOZ": { "name": "Mozambique", "latitude": -18.6657, "longitude": 35.5296, "capital": "Maputo", "population": "32.1M", "language": "Portuguese", "economyGDP": "$18B", "economySource": "IMF 2023 est." },
            "MMR": { "name": "Myanmar", "latitude": 21.9162, "longitude": 95.9560, "capital": "Naypyidaw", "population": "54.2M (UN est.)", "language": "Burmese", "economyGDP": "$60.0B (IMF 2022 est., pre-coup data varies)", "economySource": "UN/IMF" },
            "NAM": { "name": "Namibia", "latitude": -22.9576, "longitude": 18.4904, "capital": "Windhoek", "population": "2.6M", "language": "English", "economyGDP": "$13B", "economySource": "IMF 2023 est." },
            "NRU": { "name": "Nauru", "latitude": -0.5228, "longitude": 166.9315, "capital": "Yaren District (de facto)", "population": "0.01M", "language": "Nauruan, English", "economyGDP": "$0.1B", "economySource": "IMF 2023 est." },
            "NPL": { "name": "Nepal", "latitude": 28.3949, "longitude": 84.1240, "capital": "Kathmandu", "population": "30.5M", "language": "Nepali", "economyGDP": "$41B", "economySource": "IMF 2023 est." },
            "NLD": { "name": "Netherlands", "latitude": 52.1326, "longitude": 5.2913, "capital": "Amsterdam", "population": "17.7M", "language": "Dutch", "economyGDP": "$1.09T", "economySource": "WB/IMF 2023" },
            "NZL": { "name": "New Zealand", "latitude": -40.9006, "longitude": 174.8860, "capital": "Wellington", "population": "5.2M", "language": "English, Māori", "economyGDP": "$255B", "economySource": "WB/IMF 2023" },
            "NIC": { "name": "Nicaragua", "latitude": 12.8654, "longitude": -85.2072, "capital": "Managua", "population": "6.9M", "language": "Spanish", "economyGDP": "$17B", "economySource": "IMF 2023 est." },
            "NER": { "name": "Niger", "latitude": 17.6078, "longitude": 8.0817, "capital": "Niamey", "population": "25.9M", "language": "French", "economyGDP": "$16B", "economySource": "IMF 2023 est." },
            "NGA": { "name": "Nigeria", "latitude": 9.0820, "longitude": 8.6753, "capital": "Abuja", "population": "218.5M", "language": "English", "economyGDP": "$477B", "economySource": "WB/IMF 2022" },
            "MKD": { "name": "North Macedonia", "latitude": 41.6086, "longitude": 21.7453, "capital": "Skopje", "population": "2.1M", "language": "Macedonian, Albanian", "economyGDP": "$15B", "economySource": "IMF 2023 est." },
            "NOR": { "name": "Norway", "latitude": 60.4720, "longitude": 8.4689, "capital": "Oslo", "population": "5.5M", "language": "Norwegian", "economyGDP": "$505B", "economySource": "Stat Norway/IMF 2023" },
            "OMN": { "name": "Oman", "latitude": 21.5126, "longitude": 55.9233, "capital": "Muscat", "population": "4.6M", "language": "Arabic", "economyGDP": "$108.3B", "economySource": "IMF 2023 est." },
            "PAK": { "name": "Pakistan", "latitude": 30.3753, "longitude": 69.3451, "capital": "Islamabad", "population": "235.8M", "language": "Urdu, English", "economyGDP": "$374B", "economySource": "WB/IMF 2023" },
            "PLW": { "name": "Palau", "latitude": 7.5150, "longitude": 134.5825, "capital": "Ngerulmud", "population": "0.02M", "language": "Palauan, English", "economyGDP": "$0.25B", "economySource": "IMF 2023 est." },
            "PAN": { "name": "Panama", "latitude": 8.5380, "longitude": -80.7821, "capital": "Panama City", "population": "4.4M", "language": "Spanish", "economyGDP": "$82B", "economySource": "IMF 2023 est." },
            "PNG": { "name": "Papua New Guinea", "latitude": -6.3150, "longitude": 143.9555, "capital": "Port Moresby", "population": "10.1M", "language": "English, Tok Pisin, Hiri Motu", "economyGDP": "$31B", "economySource": "IMF 2023 est." },
            "PRY": { "name": "Paraguay", "latitude": -23.4425, "longitude": -58.4438, "capital": "Asunción", "population": "6.8M", "language": "Spanish, Guaraní", "economyGDP": "$43B", "economySource": "IMF 2023 est." },
            "PER": { "name": "Peru", "latitude": -9.1900, "longitude": -75.0152, "capital": "Lima", "population": "33.7M", "language": "Spanish", "economyGDP": "$265B", "economySource": "IMF 2023 est." },
            "PHL": { "name": "Philippines", "latitude": 12.8797, "longitude": 121.7740, "capital": "Manila", "population": "115.6M", "language": "Filipino, English", "economyGDP": "$435B", "economySource": "WB/IMF 2023" },
            "POL": { "name": "Poland", "latitude": 51.9194, "longitude": 19.1451, "capital": "Warsaw", "population": "37.8M", "language": "Polish", "economyGDP": "$808B", "economySource": "WB/IMF 2023" },
            "PRT": { "name": "Portugal", "latitude": 39.3999, "longitude": -8.2245, "capital": "Lisbon", "population": "10.3M", "language": "Portuguese", "economyGDP": "$277B", "economySource": "WB/IMF 2023" },
            "QAT": { "name": "Qatar", "latitude": 25.3548, "longitude": 51.1839, "capital": "Doha", "population": "2.7M", "language": "Arabic", "economyGDP": "$235.5B", "economySource": "IMF 2023 est." },
            "ROU": { "name": "Romania", "latitude": 45.9432, "longitude": 24.9668, "capital": "Bucharest", "population": "19.0M", "language": "Romanian", "economyGDP": "$0.35T", "economySource": "IMF 2024 est."},
            "RUS": { "name": "Russia", "latitude": 61.5240, "longitude": 105.3188, "capital": "Moscow", "population": "145.6M", "language": "Russian", "economyGDP": "$2.08T", "economySource": "IMF 2025 est." },
            "RWA": { "name": "Rwanda", "latitude": -1.9403, "longitude": 29.8739, "capital": "Kigali", "population": "13.8M", "language": "Kinyarwanda, French, English, Swahili", "economyGDP": "$13B", "economySource": "IMF 2023 est." },
            "KNA": { "name": "Saint Kitts and Nevis", "latitude": 17.3578, "longitude": -62.7829, "capital": "Basseterre", "population": "0.05M", "language": "English", "economyGDP": "$1B", "economySource": "IMF 2023 est." },
            "LCA": { "name": "Saint Lucia", "latitude": 13.9094, "longitude": -60.9789, "capital": "Castries", "population": "0.2M", "language": "English", "economyGDP": "$2.3B", "economySource": "IMF 2023 est." },
            "VCT": { "name": "Saint Vincent and the Grenadines", "latitude": 12.9843, "longitude": -61.2872, "capital": "Kingstown", "population": "0.1M", "language": "English", "economyGDP": "$0.9B", "economySource": "IMF 2023 est." },
            "WSM": { "name": "Samoa", "latitude": -13.7590, "longitude": -172.1046, "capital": "Apia", "population": "0.2M", "language": "Samoan, English", "economyGDP": "$0.9B", "economySource": "IMF 2023 est." },
            "SMR": { "name": "San Marino", "latitude": 43.9424, "longitude": 12.4578, "capital": "San Marino", "population": "0.03M", "language": "Italian", "economyGDP": "$1.7B", "economySource": "IMF 2022 est." },
            "STP": { "name": "Sao Tome and Principe", "latitude": 0.1864, "longitude": 6.6131, "capital": "São Tomé", "population": "0.2M", "language": "Portuguese", "economyGDP": "$0.6B", "economySource": "IMF 2023 est." },
            "SAU": { "name": "Saudi Arabia", "latitude": 23.8859, "longitude": 45.0792, "capital": "Riyadh", "population": "33.9M", "language": "Arabic", "economyGDP": "$1.11T", "economySource": "IMF 2024 est." },
            "SEN": { "name": "Senegal", "latitude": 14.4974, "longitude": -14.4524, "capital": "Dakar", "population": "17.2M", "language": "French", "economyGDP": "$31B", "economySource": "IMF 2023 est." },
            "SRB": { "name": "Serbia", "latitude": 44.0165, "longitude": 21.0059, "capital": "Belgrade", "population": "6.7M", "language": "Serbian", "economyGDP": "$75B", "economySource": "IMF 2023 est." },
            "SYC": { "name": "Seychelles", "latitude": -4.6796, "longitude": 55.4920, "capital": "Victoria", "population": "0.1M", "language": "Seychellois Creole, English, French", "economyGDP": "$1.7B", "economySource": "IMF 2023 est." },
            "SLE": { "name": "Sierra Leone", "latitude": 8.4606, "longitude": -11.7799, "capital": "Freetown", "population": "8.4M", "language": "English", "economyGDP": "$4B", "economySource": "IMF 2023 est." },
            "SGP": { "name": "Singapore", "latitude": 1.3521, "longitude": 103.8198, "capital": "Singapore", "population": "5.9M", "language": "English, Malay, Mandarin, Tamil", "economyGDP": "$0.5T", "economySource": "IMF 2023 est." },
            "SVK": { "name": "Slovakia", "latitude": 48.6690, "longitude": 19.6990, "capital": "Bratislava", "population": "5.4M", "language": "Slovak", "economyGDP": "$132B", "economySource": "IMF 2023 est." },
            "SVN": { "name": "Slovenia", "latitude": 46.1512, "longitude": 14.9955, "capital": "Ljubljana", "population": "2.1M", "language": "Slovene", "economyGDP": "$70B", "economySource": "IMF 2023 est." },
            "SLB": { "name": "Solomon Islands", "latitude": -9.6457, "longitude": 160.1562, "capital": "Honiara", "population": "0.7M", "language": "English", "economyGDP": "$1.7B", "economySource": "IMF 2023 est." },
            "SOM": { "name": "Somalia", "latitude": 5.1521, "longitude": 46.1996, "capital": "Mogadishu", "population": "17.1M (UN est.)", "language": "Somali, Arabic", "economyGDP": "$10.4B (IMF 2022 est.)", "economySource": "UN/IMF" },
            "ZAF": { "name": "South Africa", "latitude": -30.5595, "longitude": 22.9375, "capital": "Pretoria (exec)", "population": "60.4M", "language": "11 official", "economyGDP": "$0.405T", "economySource": "IMF 2025 est."},
            "SSD": { "name": "South Sudan", "latitude": 6.8770, "longitude": 31.3070, "capital": "Juba", "population": "10.9M (UN est.)", "language": "English", "economyGDP": "$5.7B (IMF 2022 est., highly uncertain)", "economySource": "UN/IMF" },
            "ESP": { "name": "Spain", "latitude": 40.4637, "longitude": -3.7492, "capital": "Madrid", "population": "47.5M", "language": "Spanish", "economyGDP": "$1.58T", "economySource": "WB/IMF 2023" },
            "LKA": { "name": "Sri Lanka", "latitude": 7.8731, "longitude": 80.7718, "capital": "Sri Jayawardenepura Kotte (legislative)", "population": "22.2M", "language": "Sinhala, Tamil", "economyGDP": "$75B", "economySource": "IMF 2023 est." },
            "SDN": { "name": "Sudan", "latitude": 12.8628, "longitude": 30.2176, "capital": "Khartoum", "population": "45.7M (UN est.)", "language": "Arabic, English", "economyGDP": "$34.3B (IMF 2022 est., highly unstable)", "economySource": "UN/IMF" },
            "SUR": { "name": "Suriname", "latitude": 3.9193, "longitude": -56.0278, "capital": "Paramaribo", "population": "0.6M", "language": "Dutch", "economyGDP": "$3B", "economySource": "IMF 2023 est." },
            "SWE": { "name": "Sweden", "latitude": 60.1282, "longitude": 18.6435, "capital": "Stockholm", "population": "10.5M", "language": "Swedish", "economyGDP": "$643B", "economySource": "WB/IMF 2023" },
            "CHE": { "name": "Switzerland", "latitude": 46.8182, "longitude": 8.2275, "capital": "Bern", "population": "8.8M", "language": "German, French, Italian, Romansh", "economyGDP": "$905B", "economySource": "WB/IMF 2023" },
            "SYR": { "name": "Syria", "latitude": 34.8021, "longitude": 38.9968, "capital": "Damascus", "population": "23.2M", "language": "Arabic", "economyGDP": "N/A", "economySource": "Conflict" },
            "TWN": { "name": "Taiwan", "latitude": 23.6978, "longitude": 120.9605, "capital": "Taipei", "population": "23.9M", "language": "Mandarin", "economyGDP": "$0.76T (approx)", "economySource": "Various 2023 est." },
            "TJK": { "name": "Tajikistan", "latitude": 38.8610, "longitude": 71.2761, "capital": "Dushanbe", "population": "9.9M", "language": "Tajik", "economyGDP": "$12B", "economySource": "IMF 2023 est." },
            "TZA": { "name": "Tanzania", "latitude": -6.3690, "longitude": 34.8888, "capital": "Dodoma", "population": "65.5M", "language": "Swahili, English", "economyGDP": "$85B", "economySource": "IMF 2023 est." },
            "THA": { "name": "Thailand", "latitude": 15.8700, "longitude": 100.9925, "capital": "Bangkok", "population": "71.7M", "language": "Thai", "economyGDP": "$0.53T", "economySource": "IMF 2024 est." },
            "TLS": { "name": "Timor-Leste", "latitude": -8.8742, "longitude": 125.7275, "capital": "Dili", "population": "1.3M", "language": "Tetum, Portuguese", "economyGDP": "$2B", "economySource": "IMF 2023 est." },
            "TGO": { "name": "Togo", "latitude": 8.6195, "longitude": 0.8248, "capital": "Lomé", "population": "8.6M", "language": "French", "economyGDP": "$9B", "economySource": "IMF 2023 est." },
            "TON": { "name": "Tonga", "latitude": -21.1790, "longitude": -175.1982, "capital": "Nukuʻalofa", "population": "0.1M", "language": "Tongan, English", "economyGDP": "$0.5B", "economySource": "IMF 2023 est." },
            "TTO": { "name": "Trinidad and Tobago", "latitude": 10.6918, "longitude": -61.2225, "capital": "Port of Spain", "population": "1.5M", "language": "English", "economyGDP": "$28B", "economySource": "IMF 2023 est." },
            "TUN": { "name": "Tunisia", "latitude": 33.8869, "longitude": 9.5375, "capital": "Tunis", "population": "12.1M", "language": "Arabic", "economyGDP": "$46B", "economySource": "IMF 2023 est." },
            "TUR": { "name": "Turkey", "latitude": 38.9637, "longitude": 35.2433, "capital": "Ankara", "population": "86.0M", "language": "Turkish", "economyGDP": "$1.15T", "economySource": "IMF 2024 est." },
            "TKM": { "name": "Turkmenistan", "latitude": 38.9697, "longitude": 59.5563, "capital": "Ashgabat", "population": "6.4M", "language": "Turkmen", "economyGDP": "$56B", "economySource": "IMF 2023 est." },
            "TUV": { "name": "Tuvalu", "latitude": -7.1095, "longitude": 177.6493, "capital": "Funafuti", "population": "0.01M", "language": "Tuvaluan, English", "economyGDP": "$0.06B", "economySource": "IMF 2023 est." },
            "UGA": { "name": "Uganda", "latitude": 1.3733, "longitude": 32.2903, "capital": "Kampala", "population": "47.1M", "language": "English, Swahili", "economyGDP": "$50B", "economySource": "IMF 2023 est." },
            "UKR": { "name": "Ukraine", "latitude": 48.3794, "longitude": 31.1656, "capital": "Kyiv", "population": "~38M", "language": "Ukrainian", "economyGDP": "$173B", "economySource": "IMF 2023 est." },
            "ARE": { "name": "UAE", "latitude": 23.4241, "longitude": 53.8478, "capital": "Abu Dhabi", "population": "9.5M", "language": "Arabic", "economyGDP": "$509.2B", "economySource": "IMF 2023 est." },
            "GBR": { "name": "UK", "latitude": 55.3781, "longitude": -3.4360, "capital": "London", "population": "67.9M", "language": "English", "economyGDP": "$3.50T", "economySource": "IMF 2025 est." },
            "USA": { "name": "USA", "latitude": 37.0902, "longitude": -95.7129, "capital": "Washington, D.C.", "population": "342.3M", "language": "English", "economyGDP": "$29.15T", "economySource": "IMF 2025 est." },
            "URY": { "name": "Uruguay", "latitude": -32.5228, "longitude": -55.7658, "capital": "Montevideo", "population": "3.4M", "language": "Spanish", "economyGDP": "$74B", "economySource": "IMF 2023 est." },
            "UZB": { "name": "Uzbekistan", "latitude": 41.3775, "longitude": 64.5853, "capital": "Tashkent", "population": "35.6M", "language": "Uzbek", "economyGDP": "$90B", "economySource": "IMF 2023 est." },
            "VUT": { "name": "Vanuatu", "latitude": -15.3767, "longitude": 166.9592, "capital": "Port Vila", "population": "0.3M", "language": "Bislama, English, French", "economyGDP": "$1B", "economySource": "IMF 2023 est." },
            "VEN": { "name": "Venezuela", "latitude": 6.4238, "longitude": -66.5897, "capital": "Caracas", "population": "28.3M", "language": "Spanish", "economyGDP": "$92B", "economySource": "WB/IMF 2023 est." },
            "VNM": { "name": "Vietnam", "latitude": 14.0583, "longitude": 108.2772, "capital": "Hanoi", "population": "98.2M", "language": "Vietnamese", "economyGDP": "$449B", "economySource": "WB/IMF 2023" },
            "YEM": { "name": "Yemen", "latitude": 15.5527, "longitude": 48.5164, "capital": "Sana'a / Aden", "population": "34.4M", "language": "Arabic", "economyGDP": "N/A", "economySource": "Conflict" },
            "ZMB": { "name": "Zambia", "latitude": -13.1339, "longitude": 27.8493, "capital": "Lusaka", "population": "20.0M", "language": "English", "economyGDP": "$29B", "economySource": "IMF 2023 est." },
            "ZWE": { "name": "Zimbabwe", "latitude": -19.0154, "longitude": 29.1549, "capital": "Harare", "population": "16.3M", "language": "16 official", "economyGDP": "$36B", "economySource": "IMF 2023 est." }
        };
        const relationTypes = { friendly: { color: 'green', strengthFactor: 1 }, hostile: { color: 'red', strengthFactor: 1 }, alliance: { color: 'blue', strengthFactor: 1.5 }, neutral: { color: 'grey', strengthFactor: 0.7 }, tense: { color: '#FF8C00', strengthFactor: 0.9 } };
        let relations = { 
            'CAN-USA': { type: 'alliance', strength: 5, explanation: "Deeply integrated economies, shared democratic values, and extensive security cooperation (NORAD, NATO). World's longest undefended border." }, 
            'FRA-USA': { type: 'friendly', strength: 4, explanation: "Historic allies (American Revolution), NATO members, significant trade and cultural ties, though occasional policy differences exist." }, 
            'DEU-USA': { type: 'friendly', strength: 4, explanation: "Strong NATO allies, major trading partners, with close political and economic cooperation post-WWII." }, 
            'GBR-USA': { type: 'alliance', strength: 5, explanation: "The 'Special Relationship' involves very close military, intelligence, economic, and cultural ties; key NATO allies." }, 
            'CHN-USA': { type: 'tense', strength: 3, explanation: "Complex relationship involving major trade interdependence alongside strategic rivalry, human rights concerns, and disputes over technology and regional influence." }, 
            'IRN-USA': { type: 'hostile', strength: 5, explanation: "No formal diplomatic relations since 1980. Deep mistrust, sanctions over Iran's nuclear program, and proxy conflicts mark this relationship." }, 
            'ISR-USA': { type: 'alliance', strength: 5, explanation: "Very strong strategic alliance with significant U.S. military and economic support for Israel; close security cooperation." }, 
            'JPN-USA': { type: 'alliance', strength: 5, explanation: "Key U.S. ally in Asia, with a mutual defense treaty, U.S. military presence, and strong economic ties." }, 
            'PRK-USA': { type: 'hostile', strength: 5, explanation: "Deeply hostile relationship due to North Korea's nuclear weapons program, human rights record, and lack of diplomatic ties. Occasional talks amid high tensions." }, 
            'RUS-USA': { type: 'hostile', strength: 4, explanation: "Significant geopolitical rivalry, disagreements over international security issues (e.g., Ukraine), sanctions, and cyber activities. Historically complex." }, 
            'IND-USA': { type: 'friendly', strength: 4, explanation: "Growing strategic partnership, particularly in defense and technology, driven by shared democratic values and concerns about regional stability." }, 
            'BRA-USA': { type: 'friendly', strength: 3, explanation: "Important trading partners with generally cooperative relations, though occasional differences on environmental and foreign policy issues." }, 
            'AUS-USA': { type: 'alliance', strength: 5, explanation: "Strong and long-standing alliance (ANZUS treaty), close military, intelligence, and economic cooperation." }, 
            'USA-ZAF': { type: 'neutral', strength: 3, explanation: "Significant trade relationship and cooperation on regional issues, though some foreign policy divergences exist." }, 
            'CAN-FRA': { type: 'friendly', strength: 4, explanation: "Shared linguistic (French) and cultural heritage, strong bilateral cooperation within international forums like La Francophonie and NATO." }, 
            'CAN-DEU': { type: 'friendly', strength: 3, explanation: "Close partners in NATO and G7, with strong trade and investment links." }, 
            'CAN-GBR': { type: 'alliance', strength: 4, explanation: "Shared monarch, Commonwealth members, close historical, cultural, and security ties." }, 
            'CAN-CHN': { type: 'neutral', strength: 2, explanation: "Significant trade but relations have been strained by political and human rights issues." }, 
            'CAN-IRN': { type: 'hostile', strength: 3, explanation: "No formal diplomatic relations since 2012, citing Iran's human rights record and regional policies." }, 
            'CAN-JPN': { type: 'friendly', strength: 3, explanation: "Partners in G7 and CPTPP, with growing trade and cooperation on Pacific issues." }, 
            'CAN-PRK': { type: 'hostile', strength: 4, explanation: "No diplomatic relations, Canada enforces sanctions against North Korea due to its nuclear program." }, 
            'CAN-RUS': { type: 'tense', strength: 2, explanation: "Relations strained, particularly since Russia's actions in Ukraine; cooperation limited, Arctic issues a point of contact." }, 
            'AUS-CAN': { type: 'friendly', strength: 4, explanation: "Commonwealth partners with similar political systems, close cooperation on many international issues." }, 
            'CAN-IND': { type: 'friendly', strength: 3, explanation: "Growing trade and people-to-people ties, though some political irritants have occurred." }, 
            'FRA-GBR': { type: 'friendly', strength: 4, explanation: "Close neighbors, NATO allies, and major trading partners, despite historical rivalries and recent Brexit-related complexities." }, 
            'DEU-GBR': { type: 'friendly', strength: 4, explanation: "Important trading partners and NATO allies, though Brexit has reshaped some aspects of the relationship." }, 
            'CHN-GBR': { type: 'neutral', strength: 2, explanation: "Significant trade, but relations are complex due to concerns over human rights, Hong Kong, and national security." }, 
            'GBR-IRN': { type: 'hostile', strength: 4, explanation: "Strained relations with disputes over Iran's nuclear program, regional activities, and consular cases." }, 
            'GBR-JPN': { type: 'friendly', strength: 4, explanation: "Strong economic partners with a comprehensive economic partnership agreement, and increasing security cooperation." }, 
            'GBR-RUS': { type: 'hostile', strength: 3, explanation: "Relations severely strained, particularly after events like the Salisbury poisoning and Russia's actions in Ukraine; sanctions in place." }, 
            'AUS-GBR': { type: 'alliance', strength: 5, explanation: "Very close historical, cultural, and security ties (Commonwealth, AUKUS). Free trade agreement." }, 
            'GBR-IND': { type: 'friendly', strength: 3, explanation: "Strong historical ties (Commonwealth), significant trade, and large diaspora connections." }, 
            'DEU-FRA': { type: 'alliance', strength: 5, explanation: "Core EU partnership, driving European integration. Close political, economic, and defense cooperation." }, 
            'CHN-FRA': { type: 'neutral', strength: 3, explanation: "Permanent UN Security Council members with significant trade, but also differences on human rights and geopolitical issues." }, 
            'FRA-IRN': { type: 'hostile', strength: 3, explanation: "Part of E3 (with Germany, UK) engaging Iran on nuclear deal. Relations often tense due to regional issues and human rights." }, 
            'FRA-JPN': { type: 'friendly', strength: 3, explanation: "Partners in G7, cooperation on technology, culture, and Indo-Pacific strategy." }, 
            'FRA-RUS': { type: 'tense', strength: 2, explanation: "Relations significantly worsened after Russia's invasion of Ukraine; France supports sanctions and Ukraine." }, 
            'FRA-IND': { type: 'friendly', strength: 3, explanation: "Strategic partnership, particularly in defense (e.g., Rafale jets), space, and civil nuclear cooperation." }, 
            'CHN-DEU': { type: 'neutral', strength: 3, explanation: "Germany's largest trading partner, but concerns exist over economic dependencies and human rights." }, 
            'DEU-IRN': { type: 'hostile', strength: 3, explanation: "Part of E3 engaging Iran on nuclear deal. Tensions over regional issues and human rights." }, 
            'DEU-JPN': { type: 'friendly', strength: 3, explanation: "G7 partners with strong economic ties and shared democratic values." }, 
            'DEU-RUS': { type: 'tense', strength: 2, explanation: "Historically significant energy ties, but relations severely damaged by Russia's invasion of Ukraine; Germany supports sanctions." }, 
            'DEU-IND': { type: 'friendly', strength: 3, explanation: "Growing economic partnership, cooperation on climate change and technology." }, 
            'CHN-IRN': { type: 'friendly', strength: 3, explanation: "Strategic partnership agreement, driven by energy needs for China and economic support for Iran against sanctions." }, 
            'CHN-JPN': { type: 'tense', strength: 3, explanation: "Major trading partners but historical grievances and territorial disputes (East China Sea) cause tension." }, 
            'CHN-PRK': { type: 'alliance', strength: 4, explanation: "Traditional allies with a mutual defense treaty, though China has also supported UN sanctions against North Korea's nuclear program." }, 
            'CHN-RUS': { type: 'alliance', strength: 4, explanation: "Declared 'no limits' partnership, driven by shared opposition to U.S. global influence; increased economic and military cooperation." }, 
            'AUS-CHN': { type: 'tense', strength: 2, explanation: "Major trading partner for Australia, but relations have been very strained due to political, security, and human rights issues." }, 
            'BRA-CHN': { type: 'friendly', strength: 4, explanation: "BRICS members, China is Brazil's largest trading partner; strong commodity trade." }, 
            'CHN-IND': { type: 'tense', strength: 3, explanation: "BRICS members but border disputes (Himalayas) and strategic competition cause significant tension." }, 
            'CHN-ZAF': { type: 'friendly', strength: 3, explanation: "BRICS members, China is a major trading partner and investor in South Africa." }, 
            'IRN-JPN': { type: 'neutral', strength: 2, explanation: "Japan has traditionally maintained diplomatic ties and imported Iranian oil, often acting as a mediator." }, 
            'JPN-PRK': { type: 'hostile', strength: 5, explanation: "No diplomatic relations, severe tensions over North Korea's nuclear/missile programs and abductions of Japanese citizens." }, 
            'JPN-RUS': { type: 'tense', strength: 2, explanation: "Territorial dispute over Kuril Islands (Northern Territories) prevents a formal peace treaty post-WWII. Relations worsened after Ukraine invasion." }, 
            'AUS-JPN': { type: 'alliance', strength: 4, explanation: "Key security partners in the Indo-Pacific, part of the Quad; strong economic ties." }, 
            'IND-JPN': { type: 'friendly', strength: 4, explanation: "Growing strategic and economic partnership (Quad members), cooperation on infrastructure and technology." }, 
            'IRN-PRK': { type: 'neutral', strength: 3, explanation: "Reported cooperation on missile technology, both under heavy international sanctions." }, 
            'IRN-RUS': { type: 'friendly', strength: 4, explanation: "Increasingly close military and economic cooperation, particularly in light of Western sanctions on both." }, 
            'IND-IRN': { type: 'neutral', strength: 2, explanation: "Historical ties, India has imported Iranian oil and is involved in Chabahar port, but U.S. sanctions complicate relations." }, 
            'PRK-RUS': { type: 'friendly', strength: 4, explanation: "Strengthened ties, including alleged arms transfers from North Korea to Russia for use in Ukraine, in defiance of UN sanctions." }, 
            'BRA-RUS': {type: 'neutral', strength: 3, explanation: "BRICS members, maintain diplomatic and trade relations, Brazil has not joined Western sanctions against Russia." }, 
            'IND-RUS': { type: 'friendly', strength: 3, explanation: "Long-standing strategic partnership, particularly in defense and energy, though India balances this with Western ties." }, 
            'IND-PRK': { type: 'hostile', strength: 4, explanation: "India maintains diplomatic relations but condemns North Korea's nuclear program and adheres to UN sanctions." }, 
            'AUS-IND': { type: 'friendly', strength: 4, explanation: "Quad members, growing strategic and economic partnership, shared interests in a stable Indo-Pacific." }, 
            'BRA-IND': { type: 'friendly', strength: 3, explanation: "BRICS and IBSA Dialogue Forum members, cooperation in various multilateral forums." }, 
            'IND-ZAF': { type: 'friendly', strength: 3, explanation: "BRICS and IBSA members, shared history in anti-colonial struggles, good diplomatic ties." }, 
            'AUS-BRA': { type: 'neutral', strength: 2, explanation: "Generally positive relations, cooperation in G20 and on agricultural trade issues." }, 
            'BRA-IRN': { type: 'neutral', strength: 2, explanation: "Maintain diplomatic and trade relations, Brazil has generally not aligned with U.S. sanctions policy on Iran." }, 
            'BRA-PRK': { type: 'neutral', strength: 1, explanation: "Brazil maintains diplomatic relations with North Korea but adheres to UN sanctions." }, 
            'BRA-ZAF': { type: 'friendly', strength: 3, explanation: "BRICS and IBSA members, cooperation on South-South issues." }, 
            'AUS-IRN': { type: 'hostile', strength: 3, explanation: "Relations strained by Iran's human rights record and nuclear program; Australia enforces sanctions." }, 
            'AUS-PRK': { type: 'hostile', strength: 4, explanation: "No diplomatic relations, Australia enforces strong sanctions against North Korea." }, 
            'AUS-RUS': { type: 'tense', strength: 2, explanation: "Relations severely deteriorated after Russia's invasion of Ukraine; Australia imposes sanctions and provides aid to Ukraine." }, 
            'AUS-ZAF': { type: 'neutral', strength: 2, explanation: "Commonwealth members with generally good relations, though some historical sporting rivalries." }, 
            'IRN-ZAF': { type: 'neutral', strength: 2, explanation: "Post-apartheid relations have been generally cooperative, with South Africa often not aligning with Western sanctions on Iran." }, 
            'PRK-ZAF': { type: 'neutral', strength: 1, explanation: "South Africa has diplomatic relations with North Korea but expresses concern over its nuclear program." }, 
            'RUS-ZAF': { type: 'neutral', strength: 3, explanation: "BRICS members, South Africa has maintained a neutral stance on the Ukraine conflict, leading to some Western criticism." }, 
            'BHR-SAU': { type: 'alliance', strength: 4, explanation: "Very close allies, Saudi Arabia has provided significant political and security support to Bahrain, especially since 2011." }, 
            'BHR-USA': { type: 'friendly', strength: 3, explanation: "Bahrain hosts the U.S. Navy's Fifth Fleet; key U.S. partner in Gulf security." }, 
            'BHR-IRN': { type: 'tense', strength: 3, explanation: "Tense relations, Bahrain accuses Iran of meddling in its internal affairs and supporting opposition groups." }, 
            'CYP-TUR': { type: 'hostile', strength: 4, explanation: "Deeply divided due to Turkey's 1974 invasion and ongoing occupation of Northern Cyprus. No diplomatic relations." }, 
            'CYP-GBR': { type: 'friendly', strength: 3, explanation: "UK is a guarantor power of Cyprus's independence and maintains sovereign base areas on the island. Commonwealth members." }, 
            'EGY-USA': { type: 'friendly', strength: 3, explanation: "Major non-NATO ally, significant U.S. military and economic aid, cooperation on counter-terrorism and regional stability." }, 
            'EGY-ISR': { type: 'neutral', strength: 2, explanation: "First Arab nation to sign a peace treaty with Israel (1979). Cold peace, but security cooperation exists, especially regarding Sinai and Gaza." }, 
            'EGY-SAU': { type: 'friendly', strength: 3, explanation: "Close political and economic allies, Saudi Arabia has provided significant financial support to Egypt." }, 
            'EGY-TUR': { type: 'tense', strength: 3, explanation: "Relations strained since 2013 ousting of Muslim Brotherhood in Egypt, though recent efforts at normalization." }, 
            'EGY-IRN': { type: 'hostile', strength: 3, explanation: "No formal diplomatic relations for decades, though some low-level contacts. Regional rivals." }, 
            'IRN-IRQ': { type: 'tense', strength: 4, explanation: "Fought a brutal war in 1980s. Post-2003, Iran has significant influence in Iraq through political and militia groups, causing tension." }, 
            'IRQ-USA': { type: 'tense', strength: 3, explanation: "Complex relationship post-2003 invasion. U.S. provides security assistance, but Iranian influence and internal Iraqi politics create tension." }, 
            'IRQ-TUR': { type: 'tense', strength: 3, explanation: "Disputes over water resources, Turkish military operations against PKK in northern Iraq, and oil exports." }, 
            'IRQ-SYR': { type: 'neutral', strength: 2, explanation: "Shared border, concerns over ISIS remnants and regional instability. Some cooperation." }, 
            'IRQ-SAU': { type: 'tense', strength: 3, explanation: "Historically difficult relations, improving slowly with reopened embassies and some economic cooperation, but regional rivalries persist." }, 
            'ISR-JOR': { type: 'neutral', strength: 2, explanation: "Peace treaty since 1994. Cooperation on security and water, but popular Jordanian sentiment often critical of Israeli policies." }, 
            'ISR-PSE': { type: 'hostile', strength: 5, explanation: "Ongoing conflict over land, security, and statehood. Characterized by violence, occupation, and lack of a lasting peace agreement." }, 
            'ISR-SYR': { type: 'hostile', strength: 5, explanation: "Officially at war since 1948, dispute over Golan Heights. Iran's presence in Syria is a major concern for Israel." }, 
            'IRN-ISR': { type: 'hostile', strength: 5, explanation: "Deeply adversarial, viewing each other as primary regional threats. Engaged in a shadow war involving cyber-attacks, assassinations, and support for proxy forces." }, 
            'ISR-LBN': { type: 'hostile', strength: 4, explanation: "No diplomatic relations, unresolved border issues. Israel has fought wars with Hezbollah in Lebanon, which remains a major threat." }, 
            'JOR-SAU': { type: 'friendly', strength: 3, explanation: "Generally close monarchical allies, cooperation on regional security." }, 
            'JOR-USA': { type: 'friendly', strength: 3, explanation: "Key U.S. partner in the region, receives significant U.S. aid, cooperation on counter-terrorism." }, 
            'IRQ-JOR': { type: 'neutral', strength: 2, explanation: "Important trade route for Iraq, Jordan relies on Iraqi oil. Generally stable relations." }, 
            'KWT-SAU': { type: 'alliance', strength: 4, explanation: "Close GCC allies, Saudi Arabia played a key role in liberating Kuwait in 1991." }, 
            'IRN-KWT': { type: 'tense', strength: 3, explanation: "Kuwait maintains cautious relations with Iran, balancing GCC ties with proximity to Iran." }, 
            'IRQ-KWT': { type: 'neutral', strength: 2, explanation: "Relations normalized after 1990 invasion, but some historical sensitivities remain. Cooperation on oil." }, 
            'KWT-USA': { type: 'alliance', strength: 4, explanation: "Major non-NATO ally, U.S. played a key role in liberating Kuwait in 1991. Strong defense ties." }, 
            'IRN-LBN': { type: 'friendly', strength: 3, explanation: "Iran provides significant support to Hezbollah in Lebanon, giving it considerable influence." }, 
            'LBN-SYR': { type: 'tense', strength: 3, explanation: "Complex and often strained relationship due to historical Syrian dominance and ongoing political interference." }, 
            'FRA-LBN': { type: 'friendly', strength: 3, explanation: "Strong historical and cultural ties, France often plays a diplomatic role in Lebanese affairs." }, 
            'OMN-USA': { type: 'friendly', strength: 3, explanation: "Long-standing strategic partnership, Oman often acts as a discreet mediator in regional conflicts." }, 
            'IRN-OMN': { type: 'neutral', strength: 3, explanation: "Oman maintains balanced relations with Iran, often facilitating dialogue between Iran and Western countries." }, 
            'OMN-SAU': { type: 'friendly', strength: 3, explanation: "GCC members, generally cooperative relations." }, 
            'OMN-ARE': { type: 'friendly', strength: 4, explanation: "Close neighbors and GCC partners, strong economic and social ties." }, 
            'PSE-SAU': { type: 'friendly', strength: 2, explanation: "Saudi Arabia historically a major financial supporter of the Palestinian cause, though recent focus has shifted." }, 
            'EGY-PSE': { type: 'tense', strength: 3, explanation: "Egypt controls Rafah crossing to Gaza, relations complex due to security concerns and Hamas control of Gaza." }, 
            'QAT-USA': { type: 'friendly', strength: 4, explanation: "Major non-NATO ally, hosts large U.S. military base (Al Udeid). Key partner in regional diplomacy." }, 
            'IRN-QAT': { type: 'neutral', strength: 3, explanation: "Qatar shares a massive natural gas field with Iran and maintains pragmatic relations, sometimes mediating." }, 
            'QAT-SAU': { type: 'tense', strength: 3, explanation: "Relations restored after a major diplomatic crisis (2017-2021 blockade), but underlying tensions remain." }, 
            'QAT-TUR': { type: 'alliance', strength: 4, explanation: "Close allies, particularly since the 2017 Gulf crisis. Turkey has a military presence in Qatar." }, 
            'IRN-SAU': { type: 'hostile', strength: 4, explanation: "Major regional rivals, competing for influence, supporting opposing sides in conflicts (e.g., Yemen, Syria). Recent China-brokered deal to restore ties, but deep mistrust remains." }, 
            'SAU-USA': { type: 'alliance', strength: 4, explanation: "Long-standing strategic partnership based on oil and security, though recently strained by human rights and oil production issues." }, 
            'SAU-ARE': { type: 'alliance', strength: 5, explanation: "Very close allies, coordinated foreign policies, key members of GCC, and partners in Yemen conflict." }, 
            'SAU-YEM': { type: 'hostile', strength: 4, explanation: "Saudi Arabia leads a military coalition supporting the internationally recognized government of Yemen against Iran-backed Houthi rebels." }, 
            'CHN-SAU': { type: 'friendly', strength: 3, explanation: "Growing economic ties, China is a major importer of Saudi oil. Increasing strategic discussions." }, 
            'RUS-SYR': { type: 'alliance', strength: 4, explanation: "Russia is a key military and political backer of the Assad regime in Syria, maintaining naval and air bases." }, 
            'IRN-SYR': { type: 'alliance', strength: 4, explanation: "Iran is a crucial supporter of the Assad regime, providing financial, military, and logistical aid." }, 
            'SYR-TUR': { type: 'hostile', strength: 5, explanation: "Turkey supports Syrian opposition groups and has conducted military incursions into northern Syria against Kurdish forces and ISIS." }, 
            'SYR-USA': { type: 'hostile', strength: 4, explanation: "U.S. opposes Assad regime, supports some opposition groups, and has conducted operations against ISIS in Syria. Sanctions in place." }, 
            'TUR-USA': { type: 'tense', strength: 3, explanation: "NATO allies but significant disagreements over Syria policy (U.S. support for YPG), Russia, and human rights." }, 
            'RUS-TUR': { type: 'tense', strength: 3, explanation: "Complex relationship involving cooperation in some areas (Syria, energy) and competition in others (Libya, Caucasus). Turkey is a NATO member." }, 
            'CHN-TUR': { type: 'neutral', strength: 2, explanation: "Growing economic ties (Belt and Road Initiative), but Turkish concerns over Uyghur human rights in China." }, 
            'DEU-TUR': { type: 'tense', strength: 3, explanation: "Large Turkish diaspora in Germany, but relations strained by human rights, rule of law concerns in Turkey, and EU accession talks." }, 
            'IRN-TUR': { type: 'neutral', strength: 2, explanation: "Neighbors with significant trade, but also regional competitors with differing stances on Syria and Iraq." }, 
            'ARE-USA': { type: 'alliance', strength: 4, explanation: "Close security and economic partner, significant arms sales, cooperation on counter-terrorism." }, 
            'IRN-ARE': { type: 'tense', strength: 3, explanation: "Significant trade ties but disputes over islands and UAE's concerns about Iran's regional policies and nuclear program." }, 
            'IND-ARE': { type: 'friendly', strength: 4, explanation: "Strong and growing economic partnership (CEPA trade deal), large Indian diaspora in UAE." }, 
            'IRN-YEM': { type: 'friendly', strength: 3, explanation: "Iran provides support to Houthi rebels in Yemen, a key factor in the ongoing conflict." },
            'RUS-UKR': { type: 'hostile', strength: 5, explanation: "Ongoing full-scale war since Russia's invasion in 2022, following annexation of Crimea in 2014 and conflict in Donbas." },
            'UKR-USA': { type: 'alliance', strength: 4, explanation: "Major strategic partner, significant US military, financial, and humanitarian aid to Ukraine, especially since 2022 Russian invasion." },
            'POL-UKR': { type: 'friendly', strength: 4, explanation: "Strong political and logistical support for Ukraine, key transit route for aid, historical ties and shared security concerns regarding Russia." },
            'DEU-UKR': { type: 'friendly', strength: 3, explanation: "Significant financial and military aid provider to Ukraine, strong supporter of sanctions against Russia." },
            'NOR-RUS': { type: 'tense', strength: 3, explanation: "Shared Arctic border, historically pragmatic relations but strained significantly after Russia's actions in Ukraine. Norway is a NATO member." },
            'NOR-SWE': { type: 'friendly', strength: 5, explanation: "Very close Nordic neighbors, extensive cooperation, shared cultural and economic ties. Sweden is now a NATO member alongside Norway." },
            'NOR-USA': { type: 'alliance', strength: 4, explanation: "NATO allies, close defense and security cooperation, particularly in the North Atlantic and Arctic." },
            'GBR-NOR': { type: 'friendly', strength: 4, explanation: "NATO allies, close partners in North Sea energy, strong defense and security ties." },
            'ARM-AZE': { type: 'hostile', strength: 5, explanation: "Long-standing conflict over Nagorno-Karabakh, with multiple wars and ongoing border tensions." },
            'ARM-TUR': { type: 'hostile', strength: 4, explanation: "No formal diplomatic relations, closed border, historical grievances related to the Armenian Genocide." },
            'AZE-TUR': { type: 'alliance', strength: 5, explanation: "\"One nation, two states.\" Very close ethnic, cultural, political, and military ties." },
            'AZE-IRN': { type: 'tense', strength: 3, explanation: "Complex relations with periods of tension over regional influence, border security, and Azerbaijan's ties with Israel." },
            'BLR-RUS': { type: 'alliance', strength: 5, explanation: "Extremely close military, economic, and political integration within the Union State framework." },
            'BLR-UKR': { type: 'hostile', strength: 4, explanation: "Belarus allowed Russia to use its territory for the 2022 invasion of Ukraine, leading to severed ties and hostility." },
            'BLR-POL': { type: 'hostile', strength: 3, explanation: "Tense relations, particularly over political repression in Belarus, migrant crisis, and support for Russia." },
            'CHN-TWN': { type: 'hostile', strength: 5, explanation: "China claims Taiwan as a province and threatens force to achieve unification; Taiwan maintains de facto independence." },
            'CUB-USA': { type: 'hostile', strength: 4, explanation: "Long-standing embargo and diplomatic hostility, though some easing of relations has occurred at times." },
            'GRC-TUR': { type: 'tense', strength: 4, explanation: "NATO allies but historical rivals with disputes over maritime borders, airspace, and Cyprus." },
            'IND-PAK': { type: 'hostile', strength: 5, explanation: "Multiple wars and ongoing conflict over Kashmir, terrorism, and nuclear rivalry." },
            'IRN-UKR': { type: 'tense', strength: 3, explanation: "Relations strained by Iran's alleged supply of drones to Russia for use against Ukraine." },
            'KOR-PRK': { type: 'hostile', strength: 5, explanation: "Technically still at war since the Korean War armistice. Deeply divided, with North Korea's nuclear program being a major threat." },
            'LBY-EGY': { type: 'tense', strength: 3, explanation: "Complex relations with Egypt supporting factions in Libyan internal conflicts; border security concerns." },
            'MAR-DZA': { type: 'hostile', strength: 4, explanation: "Closed border, rivalry over Western Sahara and regional influence." },
            'ETH-EGY': { type: 'tense', strength: 3, explanation: "Disputes over the Grand Ethiopian Renaissance Dam (GERD) on the Blue Nile and its impact on Egypt's water supply." },
            'KOR-USA': { type: 'alliance', strength: 5, explanation: "Strong military alliance with US troop presence, close economic and political ties." },
            'CHN-KOR': { type: 'tense', strength: 3, explanation: "Major trading partners, but tensions arise from North Korea issues and US THAAD deployment in South Korea." },
            'JPN-KOR': { type: 'tense', strength: 3, explanation: "Close US allies and significant trading partners, but historical grievances and territorial disputes cause frequent tension." },
        };

        // Data for Geopolitical Blocs
        const blocsData = {
            NATO: { 
                name: "North Atlantic Treaty Organization", 
                members: ["ALB", "BEL", "BGR", "CAN", "HRV", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "ISL", "ITA", "LVA", "LTU", "LUX", "MNE", "NLD", "MKD", "NOR", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "TUR", "GBR", "USA"] 
            },
            BRICS: { 
                name: "BRICS", 
                members: ["BRA", "RUS", "IND", "CHN", "ZAF", "EGY", "ETH", "IRN", "ARE"] 
            },
            EU: { 
                name: "European Union", 
                members: ["AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE"]
            },
            CANZUK: { 
                name: "CANZUK (Canada, Australia, New Zealand, United Kingdom)", 
                members: ["CAN", "AUS", "NZL", "GBR"] 
            },
            SCO: { 
                name: "Shanghai Cooperation Organisation", 
                members: ["CHN", "RUS", "IND", "PAK", "KAZ", "KGZ", "TJK", "UZB", "IRN"] 
            },
            GCC: { 
                name: "Gulf Cooperation Council", 
                members: ["SAU", "ARE", "KWT", "QAT", "BHR", "OMN"] 
            },
            G7: {
                name: "Group of Seven (G7)",
                members: ["CAN", "FRA", "DEU", "ITA", "JPN", "GBR", "USA", "EU"] 
            },
            G20: {
                name: "Group of Twenty (G20)",
                members: ["ARG", "AUS", "BRA", "CAN", "CHN", "FRA", "DEU", "IND", "IDN", "ITA", "JPN", "MEX", "RUS", "SAU", "ZAF", "KOR", "TUR", "GBR", "USA", "EU", "ESP"] 
            },
            UN: { 
                name: "United Nations",
                members: Object.keys(countries) 
            }
        };

        // Conflict Data (same as before)
        const conflictData = {
            activeWar: [ { pair: ["RUS", "UKR"], explanation: "Full-scale invasion by Russia since February 2022.", intensity: 5 },{ pair: ["ISR", "PSE"], explanation: "Ongoing armed conflict, particularly concerning Gaza and the West Bank.", intensity: 5 },{ pair: ["ISR", "YEM"], explanation: "Houthi attacks from Yemen targeting Israel and international shipping, leading to Israeli and allied responses.", intensity: 3 }],
            civilWarFailedState: [ { country: "SYR", explanation: "Ongoing multi-sided civil war since 2011.", intensity: 4 },{ country: "LBY", explanation: "Protracted political instability and division since 2011.", intensity: 4 },{ country: "YEM", explanation: "Ongoing civil war since 2014 with significant humanitarian crisis.", intensity: 5 },{ country: "ETH", explanation: "Significant internal conflicts (e.g., Tigray, Oromia, Amhara regions) leading to instability and humanitarian concerns.", intensity: 3 },{ country: "SDN", explanation: "Civil war erupted in 2023 between rival military factions, leading to a major humanitarian crisis and state fragility.", intensity: 5 },{ country: "SOM", explanation: "Long-standing conflict, Islamist insurgency, and state fragility.", intensity: 4 },{ country: "HTI", explanation: "Severe gang violence, political instability, and humanitarian crisis.", intensity: 5 },{ country: "CAF", explanation: "Ongoing civil war and humanitarian crisis.", intensity: 4 },{ country: "MLI", explanation: "Islamist insurgency, military coups, and political instability.", intensity: 4 },{ country: "BFA", explanation: "Growing Islamist insurgency and displacement crisis.", intensity: 4 },{ country: "SSD", explanation: "Fragile peace after civil war, ongoing localized violence and humanitarian needs.", intensity: 4 },{ country: "COD", explanation: "Multiple armed conflicts, particularly in the east, and vast humanitarian challenges.", intensity: 4 },{ country: "MMR", explanation: "Civil war and widespread conflict following the 2021 military coup.", intensity: 4 },{ country: "VEN", explanation: "Deep political and socio-economic crisis, though not a traditional 'failed state' by all metrics, it exhibits severe state fragility.", intensity: 2 }, { country: "AFG", explanation: "Taliban rule since 2021, ongoing humanitarian crisis and internal security challenges.", intensity: 3 }],
            exchangesOfFire: [ { pair: ["IRN", "ISR"], explanation: "Heightened tensions with direct and proxy military exchanges.", intensity: 3 },{ pair: ["IND", "PAK"], explanation: "Persistent border skirmishes in Kashmir.", intensity: 5 }, { pair: ["ARM", "AZE"], explanation: "Ongoing border clashes and tensions post-Nagorno-Karabakh war.", intensity: 3 },{ pair: ["IRN", "PAK"], explanation: "Occasional border skirmishes related to militant groups.", intensity: 2 },{ pair: ["ISR", "LBN"], explanation: "Frequent cross-border exchanges of fire, primarily between Israel and Hezbollah.", intensity: 3 },{ pair: ["ISR", "SYR"], explanation: "Israeli airstrikes targeting Iranian-linked assets in Syria; occasional Syrian responses.", intensity: 2 }],
            potentialConflicts: [ { pair: ["CHN", "TWN"], explanation: "China's claim over Taiwan and increased military pressure.", intensity: 4 },{ pair: ["CHN", "USA"], explanation: "Strategic rivalry, tensions over Taiwan, South China Sea, and economic issues.", intensity: 3 },{ pair: ["RUS", "POL"], explanation: "NATO's eastern flank, heightened tensions due to Ukraine war.", intensity: 3 }, { pair: ["EGY", "ETH"], explanation: "Dispute over the Grand Ethiopian Renaissance Dam (GERD) and water resources.", intensity: 2 },{ pair: ["PRK", "KOR"], explanation: "Persistent military standoff and North Korea's nuclear ambitions.", intensity: 4 },{ pair: ["IRN", "USA"], explanation: "Long-standing hostility, nuclear program concerns, regional proxy conflicts.", intensity: 3 },{ pair: ["IND", "CHN"], explanation: "Border disputes in the Himalayas leading to occasional clashes.", intensity: 3 },{ pair: ["GRC", "TUR"], explanation: "Disputes in the Aegean Sea and Eastern Mediterranean over maritime boundaries and resources.", intensity: 2 },{ pair: ["CHN", "PHL"], explanation: "Disputes in the South China Sea over territorial claims.", intensity: 2 }, { pair: ["MLI", "BFA"], explanation: "Sahel region instability, potential for cross-border spillover of conflicts.", intensity: 2 }, { pair: ["USA", "VEN"], explanation: "Strained relations, US sanctions, and political differences.", intensity: 1 },{ pair: ["RUS", "GEO"], explanation: "Unresolved conflicts over Abkhazia and South Ossetia.", intensity: 2 },{ pair: ["SRB", "XKX"], explanation: "Ongoing tensions and disputes over Kosovo's sovereignty.", intensity: 3} ]
        };
        
        // Nuclear Data (same as before)
        const nuclearData = {
            declaredNPT: [ { country: "USA", warheads: "~5,044" }, { country: "RUS", warheads: "~5,580" },{ country: "GBR", warheads: "~225" }, { country: "FRA", warheads: "~290" },{ country: "CHN", warheads: "~500" }],
            nonNPT: [ { country: "IND", warheads: "~172" }, { country: "PAK", warheads: "~170" },{ country: "PRK", warheads: "~50" }, { country: "ISR", warheads: "~90 (est.)" }],
            threshold: [ { country: "IRN", warheads: "0 (Threshold)" } ]
        };

        // Asset Data (Existing + New)
        const usBasesData = [ { country: "Afghanistan", name: "Bagram Ab", lat: 34.946222, lon: 69.264639 }, { country: "Afghanistan", name: "Kandahar Airfield", lat: 31.506807, lon: 65.847511 }, { country: "Afghanistan", name: "Mazar-E-Sharif", lat: 36.707497, lon: 67.209892 }, { country: "Afghanistan", name: "Gardez", lat: 33.625017, lon: 69.23584 }, { country: "Afghanistan", name: "Kabul", lat: 34.534477, lon: 69.150352 }, { country: "Afghanistan", name: "Herat", lat: 34.345236, lon: 62.205234 }, { country: "Afghanistan", name: "Shindand", lat: 33.306995, lon: 62.136453 }, { country: "Afghanistan", name: "Sharab", lat: 31.537207, lon: 64.230651 }, { country: "Afghanistan", name: "Jalalabad", lat: 34.3983, lon: 70.500641 },{ country: "American Samoa", name: "American Samoa", lat: -14.1646, lon: -170.4202 }, { country: "Ascension Island", name: "Ascension Island", lat: -7.946717, lon: -14.355916 },{ country: "Australia", name: "Northwest Cape", lat: -21.882527, lon: 114.1333 }, { country: "Australia", name: "Alice Springs", lat: -25.274398, lon: 133.77514 }, { country: "Australia", name: "Darwin, Robertson Barracks", lat: -12.445, lon: 130.974444 },{ country: "The Bahamas", name: "Andros Island", lat: 24.706381, lon: -78.019539 },{ country: "Bahrain", name: "Naval Support Activity Bahrain", lat: 26.211111, lon: 50.601111 }, { country: "Bahrain", name: "Isa Air Base", lat: 25.918333, lon: 50.590556 }, { country: "Bahrain", name: "Mina Salman", lat: 26.201, lon: 50.607 },{ country: "Belgium", name: "Chievres Ab", lat: 50.577499, lon: 3.84 }, { country: "Belgium", name: "Florennes", lat: 50.250551, lon: 4.605113 }, { country: "Belgium", name: "Kleine-Brogel", lat: 51.1329, lon: 5.4536 }, { country: "Belgium", name: "Mons (SHAPE)", lat: 50.454241, lon: 3.956659 },{ country: "British Indian Ocean Territory", name: "Diego Garcia", lat: -7.1848, lon: 72.244 },{ country: "Bulgaria", name: "Novo Selo Training Area", lat: 42.720278, lon: 26.591944 },{ country: "Cambodia", name: "Navy Med Research Unit 2, Pnom Pehn", lat: 11.55, lon: 104.916667 },{ country: "Cuba", name: "Guantanamo Bay", lat: 20.021165, lon: -75.113672 },{ country: "Djibouti", name: "Camp Lemonnier", lat: 11.543611, lon: 43.148611 },{ country: "El Salvador", name: "Comalapa", lat: 13.440833, lon: -89.055556 },{ country: "Greece", name: "Larisa", lat: 39.639022, lon: 22.419125 }, { country: "Greece", name: "Souda Bay", lat: 35.537632, lon: 24.153585 },{ country: "Greenland", name: "Thule Air Base", lat: 77.48262, lon: -69.345131 },{ country: "Honduras", name: "Soto Cano/Palmerola", lat: 14.381902, lon: -87.616722 },{ country: "Iceland", name: "Grindavik", lat: 63.846191, lon: -22.44479 },{ country: "Iraq", name: "Green Zone, Baghdad", lat: 33.307577, lon: 44.390259 }, { country: "Iraq", name: "Camp Taji", lat: 33.529444, lon: 44.2775 },{ country: "Italy", name: "Aviano AB", lat: 46.069863, lon: 12.598471 }, { country: "Italy", name: "Vicenza (Caserma Ederle)", lat: 45.545479, lon: 11.535421 }, { country: "Italy", name: "Naples (NSA Naples)", lat: 40.851775, lon: 14.268124 }, { country: "Italy", name: "Sigonella NAS", lat: 37.401667, lon: 14.922222 }, { country: "Italy", name: "Gaeta", lat: 41.244724, lon: 13.55526 }, { country: "Italy", name: "Livorno (Camp Darby)", lat: 43.548473, lon: 10.310567 },{ country: "Japan", name: "Yokota AB", lat: 35.738451, lon: 139.32693 }, { country: "Japan", name: "Kadena AB, Okinawa", lat: 26.355, lon: 127.766 }, { country: "Japan", name: "MCAS Iwakuni", lat: 34.166562, lon: 132.21885 }, { country: "Japan", name: "Sasebo Naval Base", lat: 33.179915, lon: 129.71511 }, { country: "Japan", name: "Yokosuka Naval Base", lat: 35.281341, lon: 139.6722 }, { country: "Japan", name: "Camp Zama", lat: 35.488587, lon: 139.40767 }, { country: "Japan", name: "Misawa AB", lat: 40.683134, lon: 141.36898 },{ country: "Kenya", name: "Mombasa (Camp Simba/Manda Bay)", lat: -2.2683, lon: 40.9139 }, { country: "South Korea", name: "Camp Humphreys, Pyeongtaek", lat: 36.992108, lon: 127.11294 }, { country: "South Korea", name: "Osan AB", lat: 37.14981, lon: 127.07722 }, { country: "South Korea", name: "Kunsan AB", lat: 35.967677, lon: 126.73663 }, { country: "South Korea", name: "Yongsan Garrison, Seoul", lat: 37.538427, lon: 126.96544 }, { country: "South Korea", name: "Chinhae Naval Base", lat: 35.133025, lon: 128.71004 },{ country: "Kosovo", name: "Camp Bondsteel", lat: 42.366667, lon: 21.25 },{ country: "Kuwait", name: "Ali Al Salem AB", lat: 29.3475, lon: 47.5278 }, { country: "Kuwait", name: "Camp Arifjan", lat: 28.8754534, lon: 48.1554364 }, { country: "Kuwait", name: "Ahmed Al Jaber AB", lat: 28.934917, lon: 47.791972 },{ country: "Marshall Islands", name: "Kwajalein Atoll (Reagan Test Site)", lat: 8.72037, lon: 167.7334 },{ country: "Netherlands", name: "Volkel AB", lat: 51.656, lon: 5.708 }, { country: "Norway", name: "Orland Main Air Station", lat: 63.7000, lon: 9.6000 }, { country: "Oman", name: "Masirah Island AB", lat: 20.42107, lon: 58.73035 }, { country: "Oman", name: "Thumrait AB", lat: 17.666944, lon: 54.032778 },{ country: "Peru", name: "NAMRU-6 Lima", lat: -12.047816, lon: -77.062203 },{ country: "Portugal", name: "Lajes Field, Azores", lat: 38.7617, lon: -27.095 },{ country: "Puerto Rico", name: "Fort Buchanan", lat: 18.412716, lon: -66.121957 },{ country: "Qatar", name: "Al Udeid AB", lat: 25.117222, lon: 51.314722 },{ country: "Romania", name: "Mihail Kogalniceanu AB", lat: 44.362222, lon: 28.488333 }, { country: "Romania", name: "Deveselu (Aegis Ashore)", lat: 44.0833, lon: 24.3833 },{ country: "Singapore", name: "Changi Naval Base", lat: 1.280095, lon: 103.85095 }, { country: "Spain", name: "Rota Naval Station", lat: 36.62629, lon: -6.362981 }, { country: "Spain", name: "Morón AB", lat: 37.174999, lon: -5.616 },{ country: "Turkey", name: "Incirlik AB", lat: 37, lon: 35.321333 }, { country: "Turkey", name: "Izmir (NATO LANDCOM)", lat: 38.41885, lon: 27.12872 },{ country: "United Arab Emirates", name: "Al Dhafra AB", lat: 24.24, lon: 54.548333 }, { country: "United Arab Emirates", name: "Jebel Ali Port", lat: 25.01126, lon: 55.06116 },{ country: "United Kingdom", name: "RAF Lakenheath", lat: 52.413917, lon: 0.521854 }, { country: "United Kingdom", name: "RAF Mildenhall", lat: 52.344421, lon: 0.510947 }, { country: "United Kingdom", name: "RAF Croughton", lat: 51.997949, lon: -1.211117 }, { country: "United Kingdom", name: "Menwith Hill", lat: 53.99212, lon: -1.541812 },{ country: "Guam", name: "Andersen AFB", lat: 13.5761, lon: 144.9244 }, { country: "Guam", name: "Naval Base Guam", lat: 13.44, lon: 144.6525 },{ country: "Germany", name: "Ramstein AB", lat: 49.445759, lon: 7.55454 }, { country: "Germany", name: "Spangdahlem AB", lat: 49.985679, lon: 6.684338 }, { country: "Germany", name: "Stuttgart (EUCOM/AFRICOM HQ)", lat: 48.775418, lon: 9.181759 }, { country: "Germany", name: "Grafenwoehr Training Area", lat: 49.714147, lon: 11.905874 }, { country: "Germany", name: "Baumholder", lat: 49.613889, lon: 7.333333 },];
        const chinaBasesData = [ { name: "PLA Support Base", lat: 11.5806, lon: 43.1425, country: "Djibouti" },{ name: "Ream Naval Base", lat: 10.4931, lon: 103.6344, country: "Cambodia" },{ name: "Gorno-Badakhshan Outpost", lat: 38.5, lon: 73.5, country: "Tajikistan" }, { name: "Bata Port", lat: 1.8500, lon: 9.7667, country: "Equatorial Guinea" },{ name: "Bejucal Signals Facility", lat: 23.0000, lon: -82.4000, country: "Cuba" },{ name: "Fiery Cross Reef", lat: 9.5770, lon: 112.8920, country: "South China Sea (Disputed)" }];
        const russiaBasesData = [ { name: "102nd Military Base", lat: 40.7900, lon: 43.8257, country: "Gyumri, Armenia" },{ name: "Erebuni Airbase", lat: 40.1470, lon: 44.3950, country: "Yerevan, Armenia" },{ name: "Baranavichy Radar Station", lat: 53.1333, lon: 26.0333, country: "Baranavichy, Belarus" },{ name: "Vileyka Naval Communication Center", lat: 54.4833, lon: 26.9167, country: "Vileyka, Belarus" },{ name: "7th Military Base", lat: 43.1000, lon: 40.6333, country: "Gudauta, Abkhazia (Georgia)" },{ name: "4th Military Base", lat: 42.2333, lon: 43.9667, country: "Tskhinvali, South Ossetia (Georgia)" },{ name: "Kant Airbase", lat: 42.8833, lon: 74.8500, country: "Kant, Kyrgyzstan" },{ name: "201st Military Base", lat: 38.5833, lon: 68.8000, country: "Dushanbe, Tajikistan" },{ name: "Khmeimim Air Base", lat: 35.4011, lon: 35.9486, country: "Latakia, Syria" },{ name: "Tartus Naval Base", lat: 34.9000, lon: 35.8833, country: "Tartus, Syria" },{ name: "Port Sudan Naval Base", lat: 19.6167, lon: 37.2167, country: "Port Sudan, Sudan" }];
        const indiaBasesData = [ { name: "Listening/Logistics Post", lat: 11.5, lon: 45.0, country: "Djibouti Zone" },{ name: "Airstrip & Radar Station", lat: -10.0, lon: 56.0, country: "Mauritius (Agaléga)" },{ name: "Proposed Air/Naval Facility", lat: -9.0, lon: 46.0, country: "Seychelles (Assumption)" },{ name: "Port Access (Naval Logistics)", lat: 19.0, lon: 58.5, country: "Oman (Duqm)" },{ name: "Port Access (Naval Logistics)", lat: 5.8, lon: 95.5, country: "Indonesia (Sabang)" },{ name: "Intelligence/Logistics Access", lat: -21.0, lon: 55.5, country: "Réunion (France)" }];
        const ukBasesData = [ { name: "Diego Garcia", lat: -7.3, lon: 72.4, country: "British Indian Ocean Territory" },{ name: "RAF Akrotiri", lat: 34.6, lon: 32.97, country: "Cyprus (SBA)" },{ name: "RAF Ascension Island", lat: -7.9, lon: -14.4, country: "Ascension Island" },{ name: "Naval Base Gibraltar", lat: 36.1, lon: -5.35, country: "Gibraltar" },{ name: "RAF Mount Pleasant", lat: -51.7, lon: -57.85, country: "Falkland Islands" }];
        const franceBasesData = [ { name: "French Base Djibouti", lat: 11.6, lon: 43.15, country: "Djibouti" },{ name: "Camp de la Paix", lat: 24.5, lon: 54.4, country: "UAE" },{ name: "Base Aérienne 181", lat: -21.1, lon: 55.5, country: "Réunion" },{ name: "Guiana Space Centre (Military)", lat: 4.9, lon: -52.3, country: "French Guiana" },{ name: "Détachement de Légion Étrangère", lat: -12.8, lon: 45.2, country: "Mayotte" },{ name: "Base Navale de Nouméa", lat: -22.2, lon: 166.4, country: "New Caledonia" },{ name: "Base Aérienne 190 Tahiti-Faa'a", lat: -17.7, lon: -149.4, country: "French Polynesia" }];
        const italyBasesData = [ { name: "Italian Support Mission Libya", lat: 32.9, lon: 13.2, country: "Libya" },{ name: "BMIS Djibouti", lat: 11.6, lon: 43.15, country: "Djibouti" },{ name: "UNIFIL Italian Contingent", lat: 33.9, lon: 35.5, country: "Lebanon" },{ name: "Italian Task Force Air Kuwait", lat: 29.3, lon: 47.9, country: "Kuwait" },{ name: "EUTM Somalia (Italian contingent)", lat: 2.0, lon: 45.3, country: "Somalia" }];
        const turkeyBasesData = [ { name: "Turkish Base Qatar", lat: 25.2, lon: 51.6, country: "Qatar" },{ name: "TURKSOM Military Training Base", lat: 2.0, lon: 45.3, country: "Somalia" },{ name: "Bashiqa Camp", lat: 36.4, lon: 43.2, country: "Iraq" },{ name: "Turkish Forces N. Cyprus", lat: 35.3, lon: 33.4, country: "Northern Cyprus (Disputed)" }];
        const iranBasesData = [
            { name: "Tartus/Latakia Region Presence", lat: 35.6, lon: 35.9, country: "Syria" },
            { name: "Hashd al-Shaabi Influence Zone", lat: 33.3, lon: 44.4, country: "Iraq" },
            { name: "Hezbollah Stronghold S. Lebanon", lat: 33.1, lon: 35.3, country: "Lebanon" },
            { name: "Houthi Coordination/Training", lat: 15.4, lon: 44.2, country: "Yemen" },
            { name: "IRGC Outreach Herat", lat: 34.3, lon: 62.2, country: "Afghanistan" },
            { name: "Nakhchivan ISR Post (Suspected)", lat: 39.2, lon: 45.4, country: "Azerbaijan" },
            { name: "Port Sudan Area (Past Activity)", lat: 19.6, lon: 37.2, country: "Sudan" }
        ];
        const israelBasesData = [
            // Foreign / Covert
            { name: "Kurdistan Region Presence (Foreign/Covert)", lat: 36.4, lon: 44.0, country: "Iraq" },
            { name: "Azerbaijan SIGINT/Drone Ops (Foreign/Covert)", lat: 40.1, lon: 47.6, country: "Azerbaijan" },
            { name: "Eritrea (Assab) Past Ops (Foreign/Covert)", lat: 13.0, lon: 42.7, country: "Eritrea" },
            { name: "Cyprus Joint Air/SIGINT (Foreign/Covert)", lat: 34.7, lon: 33.0, country: "Cyprus" },
            { name: "UAE/Bahrain Logistics/Intel (Foreign/Covert)", lat: 25.2, lon: 55.3, country: "UAE/Bahrain" },
            // Occupied / Disputed
            { name: "Beit El Base (Occupied)", lat: 31.9383, lon: 35.2208, country: "West Bank" },
            { name: "Ofer Base & Military Court (Occupied)", lat: 31.8635, lon: 35.1791, country: "West Bank" },
            { name: "Shomron Brigade Base (Occupied)", lat: 32.2123, lon: 35.2753, country: "West Bank" },
            { name: "Dotan Base (Occupied)", lat: 32.4371, lon: 35.1996, country: "West Bank" },
            { name: "Mount Hermon Outpost (Occupied)", lat: 33.4160, lon: 35.8544, country: "Golan Heights" },
            { name: "Nafakh Base (Occupied)", lat: 33.0923, lon: 35.7825, country: "Golan Heights" },
            { name: "Ma'ale Adumim Post (Occupied)", lat: 31.7791, lon: 35.2997, country: "East Jerusalem" },
            // Domestic
            { name: "Palmachim Airbase (Domestic)", lat: 31.8861, lon: 34.6828, country: "Israel" },
            { name: "Nevatim Airbase (Domestic)", lat: 31.2055, lon: 35.0117, country: "Israel" },
            { name: "Ramon Airbase (Domestic)", lat: 30.7754, lon: 34.6665, country: "Israel" },
            { name: "Tel Nof Airbase (Domestic)", lat: 31.8225, lon: 34.8239, country: "Israel" },
            { name: "Haifa Naval Base (Domestic)", lat: 32.8266, lon: 35.0130, country: "Israel" },
            { name: "Ashdod Naval Base (Domestic)", lat: 31.8072, lon: 34.6433, country: "Israel" },
            { name: "Dimona (Negev Nuc. Research) (Domestic)", lat: 31.0000, lon: 35.1410, country: "Israel" },
            { name: "Glilot Base Unit 8200 (Domestic)", lat: 32.1470, lon: 34.8216, country: "Israel" }
        ];

        const usAircraftCarriersData = [ { name: "Indo-Pacific Carrier Group(s)", lat: 15.0, lon: 130.0, count: 3, description: "Typically 3 Carrier Strike Groups patrol the Indo-Pacific region." },{ name: "South China Sea Carrier Group", lat: 12.5, lon: 115.0, count: 1, description: "Typically 1 Carrier Strike Group patrols the South China Sea." },{ name: "Persian Gulf Carrier Group", lat: 25.0, lon: 55.0, count: 1, description: "Typically 1 Carrier Strike Group patrols the Persian Gulf region." },{ name: "Eastern Mediterranean Carrier Group", lat: 34.0, lon: 34.8, count: 1, description: "Typically 1 Carrier Strike Group patrols the Eastern Mediterranean." }];
        const chinaAircraftCarriersData = [ { name: "Shandong Carrier Group", lat: 15.0, lon: 115.0, count: 1, description: "Shandong (CV-17) typically patrols the South China Sea." },{ name: "Liaoning Carrier Group", lat: 20.0, lon: 130.0, count: 1, description: "Liaoning (CV-16) often operates in the Philippine Sea / Western Pacific." },{ name: "Fujian Carrier Group", lat: 28.0, lon: 125.0, count: 1, description: "Fujian (CV-18) undergoing sea trials, often in the East China Sea." }];
        const russiaAircraftCarriersData = []; 
        const indiaAircraftCarriersData = [ { name: "INS Vikramaditya Carrier Group", lat: 15.0, lon: 66.0, count: 1, description: "INS Vikramaditya typically patrols the western seaboard (Arabian Sea)." },{ name: "INS Vikrant Carrier Group", lat: 14.0, lon: 90.0, count: 1, description: "INS Vikrant typically patrols the eastern seaboard (Bay of Bengal)." }];
        const ukAircraftCarriersData = [ { name: "North Sea Carrier Group", lat: 57.0, lon: 1.8, count: 1, description: "1 UK carrier group" },{ name: "Mediterranean Carrier Group", lat: 36.5, lon: 15.5, count: 1, description: "1 UK carrier group" }];
        const franceAircraftCarriersData = [ { name: "Mediterranean Carrier Group", lat: 37.0, lon: 13.0, count: 1, description: "1 French carrier group" }];
        const italyAircraftCarriersData = [ { name: "Central Med Carrier Group", lat: 38.0, lon: 15.0, count: 1, description: "1 Italian carrier group" }];
        const turkeyAircraftCarriersData = [ { name: "Eastern Med Carrier Group", lat: 36.0, lon: 34.0, count: 1, description: "1 Turkish carrier (TCG Anadolu - LHD)" } ];
        
        const usSubmarinesData = [ { name: "Indo-Pacific Submarine Patrols", lat: 18.0, lon: 135.0, count: 6, description: "Estimated 6 SSBNs/SSGNs typically on patrol in the Indo-Pacific." },{ name: "South China Sea Submarine Patrols", lat: 15.0, lon: 112.0, count: 4, description: "Estimated 4 SSBNs/SSGNs typically on patrol in the South China Sea." },{ name: "Persian Gulf Submarine Patrols", lat: 26.5, lon: 52.5, count: 2, description: "Estimated 2 SSGNs typically on patrol in/near the Persian Gulf." },{ name: "North Atlantic Submarine Patrols", lat: 50.0, lon: -30.0, count: 3, description: "Estimated 3 SSBNs typically on patrol in the North Atlantic." },{ name: "Arctic Submarine Patrols", lat: 75.0, lon: 0.0, count: 2, description: "Estimated 2 SSNs/SSGNs typically on patrol in the Arctic region." },{ name: "Eastern Mediterranean Submarine Patrols", lat: 34.5, lon: 33.0, count: 2, description: "Estimated 2 SSGNs typically on patrol in the Eastern Mediterranean." }];
        const chinaSubmarinesData = [ { name: "South China Sea Submarine Patrols", lat: 15.0, lon: 112.0, count: 6, description: "Estimated 6 SSBNs/SSNs typically on patrol in the South China Sea." },{ name: "East China Sea Submarine Patrols", lat: 28.0, lon: 125.0, count: 2, description: "Estimated 2 SSNs typically on patrol in the East China Sea." }];
        const russiaSubmarinesData = [ { name: "Arctic Barents Patrol", lat: 75.0, lon: 40.0, count: 6, description: "6 submarines in Arctic/Barents Sea" },{ name: "North Atlantic Patrol", lat: 62.0, lon: -20.0, count: 1, description: "1 submarine in North Atlantic" },{ name: "Sea of Okhotsk Patrol", lat: 55.0, lon: 150.0, count: 5, description: "5 submarines in Sea of Okhotsk" },{ name: "Sea of Japan Patrol", lat: 42.0, lon: 135.0, count: 2, description: "2 submarines in Sea of Japan" },{ name: "Eastern Mediterranean Patrol", lat: 34.5, lon: 33.0, count: 1, description: "1 submarine in Eastern Mediterranean" }];
        const indiaSubmarinesData = [ { name: "Arabian Sea Submarine Patrols", lat: 12.0, lon: 64.0, count: 1, description: "SSBN/SSN patrols in the Arabian Sea." },{ name: "Bay of Bengal Submarine Patrols", lat: 10.0, lon: 92.0, count: 1, description: "SSBN/SSN patrols in the Bay of Bengal." },{ name: "South Indian Ocean Submarine Patrols", lat: -20.0, lon: 80.0, count: 1, description: "Extended deterrence patrols in the southern Indian Ocean." }];
        const ukSubmarinesData = [ { name: "North Atlantic Deterrence Patrol", lat: 56.0, lon: -20.0, count: 2, description: "2 UK submarines" },{ name: "Norwegian Sea Patrol", lat: 70.0, lon: 5.0, count: 1, description: "1 UK submarine" }];
        const franceSubmarinesData = [ { name: "North Atlantic Patrol", lat: 48.5, lon: -12.0, count: 1, description: "1 French submarine" },{ name: "Bay of Biscay Deterrence Patrol", lat: 45.0, lon: -8.5, count: 2, description: "2 French submarines" }];
        const italySubmarinesData = [ { name: "Central Mediterranean Patrol", lat: 36.0, lon: 13.0, count: 2, description: "2 Italian submarines" }];
        const turkeySubmarinesData = [ { name: "Aegean Patrol", lat: 38.5, lon: 26.0, count: 1, description: "1 Turkish submarine" },{ name: "Eastern Mediterranean Patrol", lat: 35.8, lon: 33.5, count: 1, description: "1 Turkish submarine" }];
        const israelSubmarinesData = [
            { name: "Eastern Mediterranean Patrol", lat: 33.0, lon: 34.0, count: 2, description: "~2 Dolphin-II class submarines" },
            { name: "Red Sea / Gulf of Aden Patrol", lat: 14.5, lon: 42.5, count: 1, description: "~1 Dolphin-II class submarine" },
            { name: "Arabian Sea / N. Indian Ocean Patrol", lat: 20.0, lon: 63.0, count: 1, description: "~1 Dolphin-II class submarine (extended deterrence)" }
        ];
        
        const iranProxiesData = [ { name: "Hezbollah", lat: 33.8739, lon: 35.5081, country: "Lebanon", firepower: 10 },{ name: "Kata’ib Hezbollah", lat: 33.3128, lon: 44.3615, country: "Iraq", firepower: 9 },{ name: "Asa’ib Ahl al-Haq", lat: 33.3406, lon: 44.4009, country: "Iraq", firepower: 8 },{ name: "Harakat Hezbollah al-Nujaba", lat: 33.3400, lon: 44.4000, country: "Iraq", firepower: 8 },{ name: "Badr Organization", lat: 33.3152, lon: 44.3661, country: "Iraq", firepower: 7 },{ name: "Liwa Fatemiyoun", lat: 34.8021, lon: 38.9968, country: "Syria", firepower: 7 },{ name: "Liwa Zaynabiyoun", lat: 33.5138, lon: 36.2765, country: "Syria", firepower: 6 },{ name: "Palestinian Islamic Jihad", lat: 31.5017, lon: 34.4668, country: "Gaza", firepower: 6 },{ name: "Hamas – Izz ad-Din al-Qassam Brigades", lat: 31.5017, lon: 34.4668, country: "Gaza", firepower: 7 }, { name: "Ansar Allah – Houthis", lat: 15.3694, lon: 44.1910, country: "Yemen", firepower: 8 }];

        const strategicChokepointsData = [
            { name: "Strait of Hormuz", lat: 26.5667, lon: 56.2500, significance: 3 }, { name: "Bab el-Mandeb Strait", lat: 12.6000, lon: 43.3333, significance: 3 },
            { name: "Suez Canal", lat: 30.5852, lon: 32.2654, significance: 3 }, { name: "Strait of Malacca", lat: 2.3000, lon: 101.0000, significance: 3 },
            { name: "Taiwan Strait", lat: 24.0000, lon: 120.0000, significance: 3 }, { name: "Luzon Strait", lat: 20.0000, lon: 122.0000, significance: 2 },
            { name: "Tsushima Strait", lat: 34.4000, lon: 129.4000, significance: 2 }, { name: "Lombok Strait", lat: -8.5000, lon: 116.0000, significance: 2 },
            { name: "Sunda Strait", lat: -6.0000, lon: 105.7000, significance: 2 }, { name: "Bosporus", lat: 41.0400, lon: 29.0000, significance: 2 },
            { name: "Dardanelles", lat: 40.2000, lon: 26.4000, significance: 2 }, { name: "Kattegat & Skagerrak Straits", lat: 57.7000, lon: 11.8000, significance: 2 },
            { name: "Panama Canal", lat: 9.0800, lon: -79.6800, significance: 3 }, { name: "Straits of Florida", lat: 24.5000, lon: -81.8000, significance: 1 },
            { name: "Windward Passage", lat: 19.8000, lon: -74.0000, significance: 1 }, { name: "Cape Horn / Drake Passage", lat: -55.0000, lon: -68.0000, significance: 1 },
            { name: "Bering Strait", lat: 65.7333, lon: -168.9500, significance: 1 }, { name: "Strait of Gibraltar", lat: 35.9833, lon: -5.5833, significance: 3 }
        ];
        
        const assetViewRivals = {
            "usAssets": ["IRN", "RUS", "CHN", "VEN", "PRK"],
            "chinaAssets": ["IND", "USA", "TWN", "PHL", "KOR", "JPN"],
            "russiaAssets": ["UKR", "GEO"], // NATO members added dynamically
            "indiaAssets": ["PAK", "CHN"],
            "ukAssets": ["ARG", "RUS", "IRN"],
            "franceAssets": ["RUS", "DZA"],
            "turkeyAssets": ["GRC", "CYP", "ISR", "ARM"],
            "iranAssets": ["USA", "AZE", "ISR", "GBR", "AFG"], // For when viewing Iran's state bases
            "israelAssets": ["IRN", "SYR", "LBN", "PSE", "YEM"] // Example rivals for Israel
        };
        // Dynamically add NATO to Russia's rivals, excluding Russia itself if it were ever in NATO
        assetViewRivals.russiaAssets = assetViewRivals.russiaAssets.concat(blocsData.NATO.members.filter(m => m !== "RUS"));


        // Helper to add missing countries for blocs
        function ensureBlocMemberData() {
            const blocCountryCodes = new Set();
            for (const blocKey in blocsData) { blocsData[blocKey].members.forEach(code => blocCountryCodes.add(code));}
            blocCountryCodes.forEach(code => {
                if (!countries[code] && code !== "EU") { 
                    countries[code] = { name: code, latitude: 0, longitude: 0, capital: 'N/A', population: 'N/A', language: 'N/A', economyGDP: 'N/A', economySource: 'N/A' };
                }
            });
        }


        /** Creates a sorted key for a pair of countries. */
        function getSortedRelationKey(c1, c2) { return [c1, c2].sort().join('-'); }

        /** Initializes the Leaflet map. */
        function initLeafletMap() {
            lightTileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '&copy; OpenStreetMap', minZoom: 2, maxZoom: 10, noWrap: false });
            darkTileLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', { attribution: '&copy; OpenStreetMap &copy; CARTO', minZoom: 2, maxZoom: 10, noWrap: false });
            leafletMap = L.map('map-container', { worldCopyJump: true, layers: [lightTileLayer], preferCanvas: true, zoomControl: false }).setView([20, 0], 2);
            L.control.zoom({ position: 'topright' }).addTo(leafletMap); 
            leafletMap.on('contextmenu', (e) => { L.DomEvent.stop(e); handleMapRightClick(); return false; });
            
            const layerGroups = [
                conflictLinesGroup, nuclearWarheadMarkersGroup, usBasesMarkersGroup, chinaBasesMarkersGroup, russiaBasesMarkersGroup,
                iranBasesMarkersGroup, iranProxiesMarkersGroup, usCarriersMarkersGroup, usSubmarinesMarkersGroup, chinaCarriersMarkersGroup,
                chinaSubmarinesMarkersGroup, russiaCarriersMarkersGroup, russiaSubmarinesMarkersGroup, indiaBasesMarkersGroup,
                indiaCarriersMarkersGroup, indiaSubmarinesMarkersGroup, ukBasesMarkersGroup, ukCarriersMarkersGroup, ukSubmarinesMarkersGroup,
                franceBasesMarkersGroup, franceCarriersMarkersGroup, franceSubmarinesMarkersGroup, italyBasesMarkersGroup,
                italyCarriersMarkersGroup, italySubmarinesMarkersGroup, turkeyBasesMarkersGroup, turkeyCarriersMarkersGroup,
                turkeySubmarinesMarkersGroup, israelBasesMarkersGroup, israelSubmarinesMarkersGroup, chokepointsMarkersGroup
            ];
            layerGroups.forEach(group => group.addTo(leafletMap));
        }

        /** Adds country polygons and labels from GeoJSON data to Leaflet map. */
        async function addLeafletCountriesLayer() {
            try {
                const response = await fetch('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json');
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
                const geoJsonData = await response.json();
                const filteredFeatures = geoJsonData.features.filter(feature => countries[feature.id]);

                countryGeoJsonLayer = L.geoJSON({ type: "FeatureCollection", features: filteredFeatures }, {
                    style: (feature) => defaultLeafletPolygonStyle(),
                    onEachFeature: (feature, layer) => {
                        const countryCode = feature.id; 
                        countryPolygonLayers[countryCode] = layer; 
                        layer.on('click', (e) => { L.DomEvent.stopPropagation(e); handleCountryClick(countryCode); });
                        const countryData = countries[countryCode];
                        if (countryData) {
                            let tooltipContent = `<strong>${countryData.name || countryCode}</strong>`;
                            if(countryData.capital) tooltipContent += `<br>Capital: ${countryData.capital}`;
                            if(countryData.population) tooltipContent += `<br>Population: ${countryData.population}`;
                            if(countryData.economyGDP) tooltipContent += `<br>GDP: ${countryData.economyGDP}`;
                            layer.bindTooltip(tooltipContent, { sticky: true, className: 'country-hover-tooltip'});
                        }
                        if (countryData && countryData.latitude && countryData.longitude) {
                            const label = L.marker([countryData.latitude, countryData.longitude], {
                                icon: L.divIcon({ className: 'country-label', html: `<div>${countryData.name}</div>`, iconSize: [80, 20], iconAnchor: [40, 10] }),
                                interactive: false, keyboard: false, opacity: 1 
                            }).addTo(leafletMap);
                            countryLabels[countryCode] = label;
                        }
                    }
                }).addTo(leafletMap);
                 return true; 
            } catch (error) { 
                console.error("Error loading or processing GeoJSON for Leaflet:", error.message, error.stack); 
                if (leafletMap) { L.marker(leafletMap.getCenter(), { icon: L.divIcon({ className: 'error-message-overlay', html: `<div style="position:absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background:rgba(255,0,0,0.7); color:white; padding:20px; border-radius:5px; font-size:16px; text-align:center;">Failed to load map boundaries (Error: ${error.message}).<br>Please check console for details or try again later.</div>`, iconSize: [400,100] }) }).addTo(leafletMap); }
                return false; 
            }
        }
        
        function highlightLeafletCountryShape(countryCode, styleFnInput) {
            if (countryPolygonLayers[countryCode]) {
                let styleToExecute = (typeof styleFnInput === 'function') ? styleFnInput : highlightedLeafletPolygonStyle;
                try {
                    const styleObject = styleToExecute(); 
                    if (typeof styleObject === 'object' && styleObject !== null) {
                        countryPolygonLayers[countryCode].setStyle(styleObject);
                        countryPolygonLayers[countryCode].bringToFront();
                        if (countryLabels[countryCode] && countryLabels[countryCode].getElement()) {
                           countryLabels[countryCode].getElement().classList.add('visible');
                        }
                    } else { countryPolygonLayers[countryCode].setStyle(defaultLeafletPolygonStyle()); }
                } catch (e) {
                    console.error("Error executing style function for " + countryCode + ":", e, "Function was:", styleToExecute ? styleToExecute.name : "undefined");
                    countryPolygonLayers[countryCode].setStyle(defaultLeafletPolygonStyle()); 
                }
            }
        }
        function unhighlightLeafletCountryShape(countryCode) {
            if (countryPolygonLayers[countryCode] && countryPolygonLayers[countryCode].getElement()) {
                countryPolygonLayers[countryCode].setStyle(defaultLeafletPolygonStyle());
                if (countryLabels[countryCode] && countryLabels[countryCode].getElement()) countryLabels[countryCode].getElement().classList.remove('visible');
            }
        }
        function highlightBlocMemberShape(countryCode) {
            if (countryPolygonLayers[countryCode]) {
                countryPolygonLayers[countryCode].setStyle(blocHighlightStyle());
                countryPolygonLayers[countryCode].bringToFront();
                 if (countryLabels[countryCode] && countryLabels[countryCode].getElement()) countryLabels[countryCode].getElement().classList.add('visible');
            }
        }

        function drawLeafletRelationship(c1, c2, type, strength, customColorVar = null, lineIntensity = null) {
            const d1 = countries[c1], d2 = countries[c2];
            const lat1 = d1?.capital_latitude || d1?.latitude, lon1 = d1?.capital_longitude || d1?.longitude;
            const lat2 = d2?.capital_latitude || d2?.latitude, lon2 = d2?.capital_longitude || d2?.longitude;

            if (d1 && d2 && lat1 !== undefined && lon1 !== undefined && lat2 !== undefined && lon2 !== undefined) {
                const latlngs = [[lat1, lon1], [lat2, lon2]];
                const effectiveStrength = lineIntensity !== null ? lineIntensity : strength;
                const lineWeight = Math.max(1, Math.min(8, effectiveStrength * 1.5)), lineOpacity = 0.3 + (effectiveStrength / 5) * 0.7; 
                const conf = relationTypes[type] || { color: 'grey' };
                let lineColor = customColorVar ? getCssVariable(customColorVar) : conf.color; 
                if (!customColorVar && blocsData.NATO.members.includes(c1) && blocsData.NATO.members.includes(c2)) lineColor = relationTypes.alliance.color;

                const line = L.polyline(latlngs, { color: lineColor, weight: lineWeight, opacity: lineOpacity, smoothFactor: 1 });
                if (!customColorVar) { 
                    line.bindTooltip(`<b>${d1.name} - ${d2.name}</b><br>Type: ${type}<br>Strength: ${strength}/5`, { sticky: true, className: 'leaflet-tooltip-pane conflict-line-tooltip' }); 
                    const key = getSortedRelationKey(c1, c2);
                    if (leafletRelationsLines[key]) leafletMap.removeLayer(leafletRelationsLines[key]);
                    leafletRelationsLines[key] = line; line.addTo(leafletMap); 
                } else { 
                    let conflictExplanation = "Conflict details not specified.";
                    const conflictCategories = ['activeWar', 'exchangesOfFire', 'potentialConflicts']; 
                    for (const category of conflictCategories) {
                        const conflictEntry = conflictData[category]?.find(c => (c.pair && ((c.pair[0] === c1 && c.pair[1] === c2) || (c.pair[0] === c2 && c.pair[1] === c1))));
                        if (conflictEntry) { conflictExplanation = conflictEntry.explanation; break; }
                    }
                    line.bindTooltip(`<b>${d1.name} & ${d2.name}</b><br>${conflictExplanation}<br>Intensity: ${effectiveStrength}/5`, { sticky: true, className: 'leaflet-tooltip-pane conflict-line-tooltip' });
                    conflictLinesGroup.addLayer(line); 
                }
            }
        }

        function clearAllLeafletRelationshipLines() {
            for (const key in leafletRelationsLines) { if (leafletMap.hasLayer(leafletRelationsLines[key])) leafletMap.removeLayer(leafletRelationsLines[key]); }
            leafletRelationsLines = {};
            const layerGroupsToClear = [
                conflictLinesGroup, nuclearWarheadMarkersGroup, usBasesMarkersGroup, chinaBasesMarkersGroup, russiaBasesMarkersGroup,
                iranBasesMarkersGroup, iranProxiesMarkersGroup, usCarriersMarkersGroup, usSubmarinesMarkersGroup, chinaCarriersMarkersGroup,
                chinaSubmarinesMarkersGroup, russiaCarriersMarkersGroup, russiaSubmarinesMarkersGroup, indiaBasesMarkersGroup,
                indiaCarriersMarkersGroup, indiaSubmarinesMarkersGroup, ukBasesMarkersGroup, ukCarriersMarkersGroup, ukSubmarinesMarkersGroup,
                franceBasesMarkersGroup, franceCarriersMarkersGroup, franceSubmarinesMarkersGroup, italyBasesMarkersGroup,
                italyCarriersMarkersGroup, italySubmarinesMarkersGroup, turkeyBasesMarkersGroup, turkeyCarriersMarkersGroup,
                turkeySubmarinesMarkersGroup, israelBasesMarkersGroup, israelSubmarinesMarkersGroup, chokepointsMarkersGroup
            ];
            layerGroupsToClear.forEach(group => group.clearLayers());
        }

        function drawLinesForCountryLeaflet(countryCode) {
            clearAllLeafletRelationshipLines();
            for (const key in relations) {
                if (relations.hasOwnProperty(key)) {
                    const [c1, c2] = key.split('-');
                    if (c1 === countryCode || c2 === countryCode) {
                        const rel = relations[key];
                        drawLeafletRelationship(c1, c2, rel.type, rel.strength);
                    }
                }
            }
        }
        
        function drawAllInitialLeafletRelations() {
            clearAllLeafletRelationshipLines();
            for (const key in relations) {
                if (relations.hasOwnProperty(key)) {
                    const [c1, c2] = key.split('-');
                    const rel = relations[key];
                    drawLeafletRelationship(c1, c2, rel.type, rel.strength);
                }
            }
        }

        function showInfoPanel(title, contentHTML, showPotentialConflictToggle = false) { infoPanelTitle.textContent = title; infoPanelContent.innerHTML = contentHTML; infoPanel.classList.add('active');}
        function hideInfoPanel() { infoPanel.classList.remove('active'); infoPanelTitle.textContent = "Information"; infoPanelContent.innerHTML = "<p>Click on a country or select a view to see details.</p>"; }
        
        function showCountryStatsPanel(countryCode) {
            const country = countries[countryCode]; if (!country) { hideInfoPanel(); return; } 
            let content = `<p><strong>Capital:</strong> ${country.capital || 'N/A'}</p><p><strong>Population:</strong> ${country.population || 'N/A'}</p><p><strong>Official Language(s):</strong> ${country.language || 'N/A'}</p><p><strong>Economy (Nominal GDP):</strong> ${country.economyGDP || 'N/A'}</p>`;
            if (country.economySource) content += `<p><small><em>Source: ${country.economySource}</em></small></p>`;
            showInfoPanel(`Country Information: ${country.name}`, content);
        }

        function showRelationshipPanel(countryCode1, countryCode2) {
            const sortedKey = getSortedRelationKey(countryCode1, countryCode2); const relation = relations[sortedKey];
            const country1Name = countries[countryCode1]?.name || countryCode1; const country2Name = countries[countryCode2]?.name || countryCode2;
            if (relation) {
                let content = `<p><strong>Relation Type:</strong> <span style="color:${relationTypes[relation.type]?.color || 'grey'}; text-transform:capitalize;">${relation.type}</span></p><p><strong>Strength:</strong> ${relation.strength}/5</p><p><strong>Explanation:</strong></p><p>${relation.explanation || 'Specific explanation not yet defined.'}</p>`;
                showInfoPanel(`Relations: ${country1Name} & ${country2Name}`, content);
            } else { showInfoPanel(`Relations: ${country1Name} & ${country2Name}`, "<p>No specific diplomatic relationship defined in the dataset. Assumed neutral.</p>");}
        }
        
        function parseNumericValue(valueStr) {
            if (typeof valueStr !== 'string' || valueStr === 'N/A') return 0;
            const numPart = parseFloat(valueStr.replace(/[^0-9.-]+/g,"")); if (isNaN(numPart)) return 0;
            if (valueStr.toUpperCase().includes('T')) return numPart * 1e12; if (valueStr.toUpperCase().includes('B')) return numPart * 1e9;  
            if (valueStr.toUpperCase().includes('M')) return numPart * 1e6; return numPart; 
        }
        function formatNumber(num) {
            if (num >= 1e12) return (num / 1e12).toFixed(2) + " Trillion"; if (num >= 1e9) return (num / 1e9).toFixed(2) + " Billion";
            if (num >= 1e6) return (num / 1e6).toFixed(2) + " Million"; return num.toLocaleString();
        }

        function handleBlocSelection() {
            const selectedBlocKey = blocSelect.value;
            if (selectedBloc === selectedBlocKey && selectedBlocKey !== "") { resetToDefaultView(); mainViewSelect.value = ""; return; }
            selectedBloc = selectedBlocKey; activeConflictFilter = null; nuclearViewActive = false; assetsViewActive = false; chokepointsViewActive = false;
            updateActiveControlStyles();
            if (firstSelectedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode);
            firstSelectedCountryCode = null; secondSelectedCountryCode = null; clearAllLeafletRelationshipLines();
            for (const code in countryPolygonLayers) unhighlightLeafletCountryShape(code);
            for (const code in countryLabels) if(countryLabels[code] && countryLabels[code].getElement()) countryLabels[code].getElement().classList.remove('visible');

            if (selectedBlocKey && blocsData[selectedBlocKey]) {
                const bloc = blocsData[selectedBlocKey]; let totalPopulation = 0; let totalGDP = 0; const memberNames = [];
                bloc.members.forEach(memberCode => {
                    if (countries[memberCode] && countryPolygonLayers[memberCode]) { 
                        highlightBlocMemberShape(memberCode); memberNames.push(countries[memberCode].name);
                        totalPopulation += parseNumericValue(countries[memberCode].population); totalGDP += parseNumericValue(countries[memberCode].economyGDP);
                    } else if (memberCode === "EU" && (bloc.name === "Group of Seven (G7)" || bloc.name === "Group of Twenty (G20)")) { memberNames.push("European Union (Rep.)");}
                });
                if (bloc.name === "United Nations") { hideInfoPanel(); } 
                else {
                    let content = `<p><strong>Members:</strong></p><ul>`; memberNames.sort().forEach(name => content += `<li>${name}</li>`); content += `</ul>`;
                    content += `<p><strong>Combined Population:</strong> ${formatNumber(totalPopulation)} (approx.)</p>`;
                    content += `<p><strong>Combined Economy (GDP):</strong> $${formatNumber(totalGDP)} (approx.)</p>`;
                    showInfoPanel(`Bloc Information: ${bloc.name}`, content);
                }
            } else { hideInfoPanel(); if (mainViewSelect.value === "blocs") mainViewSelect.value = ""; resetToDefaultView(false); }
        }
        
        function displayConflicts(conflictType) {
            clearAllLeafletRelationshipLines(); for (const code in countryPolygonLayers) unhighlightLeafletCountryShape(code); 
            let highlightedCountries = new Set(); let panelContent = "<h3>Global Conflicts Overview:</h3>";
            function processConflictCategory(categoryData, styleFn, lineColorVar, explanationTitle, typeForLine) {
                panelContent += `<p><strong>${explanationTitle}:</strong></p><ul>`;
                categoryData.forEach(conflict => {
                    if (conflict.pair) { 
                        const [c1, c2] = conflict.pair;
                        if (countries[c1] && countries[c2] && countryPolygonLayers[c1] && countryPolygonLayers[c2]) {
                            if (!highlightedCountries.has(c1)) { highlightLeafletCountryShape(c1, styleFn); highlightedCountries.add(c1); }
                            if (!highlightedCountries.has(c2)) { highlightLeafletCountryShape(c2, styleFn); highlightedCountries.add(c2); }
                            drawLeafletRelationship(c1, c2, typeForLine, conflict.intensity, lineColorVar, conflict.intensity);
                            panelContent += `<li>${countries[c1].name} ${typeForLine === 'hostile' ? 'vs' : '&'} ${countries[c2].name}: ${conflict.explanation}</li>`;
                        }
                    } else if (conflict.country) { 
                        const c = conflict.country;
                        if (countries[c] && countryPolygonLayers[c] && !highlightedCountries.has(c)) { 
                            highlightLeafletCountryShape(c, styleFn); highlightedCountries.add(c);
                            panelContent += `<li>${countries[c].name}: ${conflict.explanation}</li>`;
                        }
                    }
                }); panelContent += "</ul>";
            }
            if (conflictType === 'activeWar' || conflictType === 'allConflicts') processConflictCategory(conflictData.activeWar, conflictStyleRed, '--conflict-red-border', "Active Interstate Wars (Red)", 'hostile');
            if (conflictType === 'civilWarFailedState' || conflictType === 'allConflicts') processConflictCategory(conflictData.civilWarFailedState, conflictStyleBrown, null, "Internal Conflicts/State Fragility (Brown)", 'neutral');
            if (conflictType === 'exchangesOfFire' || conflictType === 'allConflicts') processConflictCategory(conflictData.exchangesOfFire, conflictStyleOrange, '--conflict-orange-border', "Recent Direct Exchanges (Orange)", 'tense');
            if (conflictType === 'potentialConflicts' || conflictType === 'allConflicts') processConflictCategory(conflictData.potentialConflicts, conflictStyleYellow, '--conflict-yellow-border', "Potential Conflicts (Yellow)", 'tense');
            showInfoPanel(conflictType === 'allConflicts' ? "All Conflict Hotspots" : `Conflict View: ${conflictTypeSelect.options[conflictTypeSelect.selectedIndex].text}`, panelContent);
            updateAllHighlightStyles(); 
        }

        function handleConflictTypeSelection() {
            const selectedType = conflictTypeSelect.value;
            if (activeConflictFilter === selectedType && selectedType !== "") { resetToDefaultView(); mainViewSelect.value = ""; return;}
            activeConflictFilter = selectedType; conflictViewActive = !!selectedType; selectedBloc = null; nuclearViewActive = false; assetsViewActive = false; chokepointsViewActive = false;
            updateActiveControlStyles();
            if (firstSelectedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode);
            firstSelectedCountryCode = null; secondSelectedCountryCode = null;
            if (conflictViewActive) displayConflicts(selectedType); else resetToDefaultView(false); 
        }
        
        function handleNuclearView() {
            if (nuclearViewActive) { resetToDefaultView(); mainViewSelect.value = ""; return;}
            nuclearViewActive = true; activeConflictFilter = null; conflictTypeSelect.style.display = 'none'; conflictTypeSelect.value = "";
            selectedBloc = null; blocSelect.style.display = 'none'; blocSelect.value = ""; assetsViewActive = false; assetTypeSelect.style.display = 'none'; assetTypeSelect.value = "allBases"; chokepointsViewActive = false;
            updateActiveControlStyles();
            if (firstSelectedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode);
            firstSelectedCountryCode = null; secondSelectedCountryCode = null; clearAllLeafletRelationshipLines(); 
            let panelContent = "<h3>Nuclear Capabilities Overview:</h3>"; let highlightedForNuclear = new Set();
            panelContent += "<p><strong>Non-NPT Signatories (Red):</strong></p><ul>";
            nuclearData.nonNPT.forEach(item => { if (countries[item.country] && countryPolygonLayers[item.country]) { highlightLeafletCountryShape(item.country, nuclearNonNPTStyle); addWarheadLabel(item.country, item.warheads); panelContent += `<li>${countries[item.country].name}: ${item.warheads}</li>`; highlightedForNuclear.add(item.country);}}); panelContent += "</ul>";
            panelContent += "<p><strong>Declared NPT Signatories (Orange):</strong></p><ul>";
            nuclearData.declaredNPT.forEach(item => { if (countries[item.country] && countryPolygonLayers[item.country] && !highlightedForNuclear.has(item.country)) { highlightLeafletCountryShape(item.country, nuclearDeclaredStyle); addWarheadLabel(item.country, item.warheads); panelContent += `<li>${countries[item.country].name}: ${item.warheads}</li>`; highlightedForNuclear.add(item.country);}}); panelContent += "</ul>";
            panelContent += "<p><strong>Threshold States (Yellow):</strong></p><ul>";
            nuclearData.threshold.forEach(item => { if (countries[item.country] && countryPolygonLayers[item.country] && !highlightedForNuclear.has(item.country)) { highlightLeafletCountryShape(item.country, nuclearThresholdStyle); addWarheadLabel(item.country, item.warheads); panelContent += `<li>${countries[item.country].name}: ${item.warheads}</li>`;}}); panelContent += "</ul>";
            showInfoPanel("Nuclear States Overview", panelContent);
            for (const code in countryPolygonLayers) if (!highlightedForNuclear.has(code)) unhighlightLeafletCountryShape(code);
        }

        function addWarheadLabel(countryCode, warheadText) {
            const country = countries[countryCode];
            if (country && country.latitude && country.longitude && leafletMap) {
                const warheadIcon = L.divIcon({ className: 'warhead-label visible', html: `<div style="font-weight: bold;">${warheadText}</div>`, iconSize: [80, 25], iconAnchor: [40, -20] });
                L.marker([country.latitude, country.longitude], { icon: warheadIcon, zIndexOffset: 1000 }).addTo(nuclearWarheadMarkersGroup);
            }
        }

        function createTriangleMarker(colorRgba) { return L.divIcon({ className: 'triangle-marker-container', html: `<div class="triangle-marker" style="border-bottom-color: ${colorRgba};"></div>`, iconSize: [12, 10], iconAnchor: [6, 10] });}
        function createPentagonMarker(colorRgba, size) { const height = Math.round(size * 0.92); return L.divIcon({ className: 'pentagon-marker-container', html: `<div class="pentagon-marker" style="background-color: ${colorRgba}; width:${size}px; height:${height}px;"></div>`, iconSize: [size, height], iconAnchor: [size/2, height]});}
        function createOvalMarker(colorRgba, size) { const height = Math.round(size * 0.53); return L.divIcon({ className: 'oval-marker-container', html: `<div class="oval-marker" style="background-color: ${colorRgba}; width:${size}px; height:${height}px;"></div>`, iconSize: [size, height], iconAnchor: [size/2, height/2]});}
        function createChokepointMarker(significance) {
            let fontSize = '16px'; if (significance === 1) fontSize = '12px'; else if (significance === 3) fontSize = '20px';
            return L.divIcon({ className: 'chokepoint-x-marker', html: `<div style="font-size:${fontSize};">X</div>`, iconSize: [parseInt(fontSize,10), parseInt(fontSize,10)], iconAnchor: [parseInt(fontSize,10)/2, parseInt(fontSize,10)/2]});
        }
        
        function handleAssetTypeSelection() {
            currentAssetType = assetTypeSelect.value; assetsViewActive = true; nuclearViewActive = false;
            activeConflictFilter = null; conflictTypeSelect.style.display = 'none'; conflictTypeSelect.value = "";
            selectedBloc = null; blocSelect.style.display = 'none'; blocSelect.value = ""; chokepointsViewActive = false;
            updateActiveControlStyles();
            if (firstSelectedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode);
            firstSelectedCountryCode = null; secondSelectedCountryCode = null; clearAllLeafletRelationshipLines(); 

            let panelContent = "<h3>Military Assets Overview:</h3>"; let panelTitle = "Military Assets";
            for (const code in countryPolygonLayers) unhighlightLeafletCountryShape(code);
            
            // Highlight rivals first if a specific asset view is selected
            if (currentAssetType !== "allBases" && assetViewRivals[currentAssetType]) {
                assetViewRivals[currentAssetType].forEach(rivalCode => {
                    if (countries[rivalCode] && countryPolygonLayers[rivalCode]) {
                        highlightLeafletCountryShape(rivalCode, rivalCountryHighlightStyle);
                    }
                });
            }

            const assetColorOpacity = "0.7"; 
            const usTriangleIcon = createTriangleMarker(`rgba(0, 123, 255, ${assetColorOpacity})`);
            const chinaTriangleIcon = createTriangleMarker(getCssVariable('--china-highlight-fill'));
            const russiaTriangleIcon = createTriangleMarker(getCssVariable('--russia-highlight-fill'));
            const indiaTriangleIcon = createTriangleMarker(getCssVariable('--india-highlight-fill'));
            const ukTriangleIcon = createTriangleMarker(getCssVariable('--uk-highlight-fill'));
            const franceTriangleIcon = createTriangleMarker(getCssVariable('--france-highlight-fill'));
            const italyTriangleIcon = createTriangleMarker(getCssVariable('--italy-highlight-fill'));
            const turkeyTriangleIcon = createTriangleMarker(getCssVariable('--turkey-highlight-fill'));
            const iranTriangleIcon = createTriangleMarker(getCssVariable('--iran-highlight-fill')); // For Iran's state bases
            const israelTriangleIcon = createTriangleMarker(getCssVariable('--israel-highlight-fill'));


            // Helper function to plot assets
            function plotAssets(countryCode, basesData, carriersData, submarinesData, baseIcon, carrierColorVar, subColorVar, 
                                baseGroup, carrierGroup, subGroup, countryHighlightStyleFn, panelTitleText, panelDescText) {
                if (countries[countryCode] && countryPolygonLayers[countryCode]) highlightLeafletCountryShape(countryCode, countryHighlightStyleFn);
                basesData.forEach(base => { if (base.lat && base.lon) L.marker([base.lat, base.lon], { icon: baseIcon }).bindTooltip(base.name + (base.country ? ` (${base.country})` : "")).addTo(baseGroup); });
                carriersData.forEach(cg => L.marker([cg.lat, cg.lon], { icon: createPentagonMarker(getCssVariable(carrierColorVar), 10 + (cg.count || 1) * 3) }).bindTooltip(cg.name + (cg.description ? `<br>${cg.description}`: "")).addTo(carrierGroup));
                submarinesData.forEach(sg => L.marker([sg.lat, sg.lon], { icon: createOvalMarker(getCssVariable(subColorVar), 12 + (sg.count || 1) * 3) }).bindTooltip(sg.name + (sg.description ? `<br>${sg.description}`: "")).addTo(subGroup));
                if (currentAssetType === countryCode.toLowerCase() + "Assets" || (countryCode === "USA" && currentAssetType === "usBases") || (countryCode === "IRN" && currentAssetType === "iranAssets") || (countryCode === "ISR" && currentAssetType === "israelAssets")) { // Adjusted for existing naming
                     panelTitle = panelTitleText; panelContent = panelDescText;
                }
            }
            
            if (currentAssetType === "usAssets" || currentAssetType === "allBases") plotAssets("USA", usBasesData, usAircraftCarriersData, usSubmarinesData, usTriangleIcon, '--country-highlight-fill-light', '--country-highlight-fill-light', usBasesMarkersGroup, usCarriersMarkersGroup, usSubmarinesMarkersGroup, highlightedLeafletPolygonStyle, "US Military Assets & Rivals", "<h3>US Military Presence:</h3><p>US (Blue), Rivals (Grey). Triangles (bases), Pentagons (carriers), Ovals (subs).</p>");
            if (currentAssetType === "chinaAssets" || currentAssetType === "allBases") plotAssets("CHN", chinaBasesData, chinaAircraftCarriersData, chinaSubmarinesData, chinaTriangleIcon, '--china-highlight-fill', '--china-highlight-fill', chinaBasesMarkersGroup, chinaCarriersMarkersGroup, chinaSubmarinesMarkersGroup, chinaHighlightStyle, "Chinese Military Assets & Rivals", "<h3>Chinese Military Presence:</h3><p>China (Red), Rivals (Grey). Triangles (bases), Pentagons (carriers), Ovals (subs).</p>");
            if (currentAssetType === "russiaAssets" || currentAssetType === "allBases") plotAssets("RUS", russiaBasesData, russiaAircraftCarriersData, russiaSubmarinesData, russiaTriangleIcon, '--russia-highlight-fill', '--russia-highlight-fill', russiaBasesMarkersGroup, russiaCarriersMarkersGroup, russiaSubmarinesMarkersGroup, russiaHighlightStyle, "Russian Military Assets & Rivals", "<h3>Russian Military Presence:</h3><p>Russia (Yellow), Rivals (Grey). Triangles (bases), Ovals (subs). No op carriers.</p>");
            if (currentAssetType === "indiaAssets" || currentAssetType === "allBases") plotAssets("IND", indiaBasesData, indiaAircraftCarriersData, indiaSubmarinesData, indiaTriangleIcon, '--india-highlight-fill', '--india-highlight-fill', indiaBasesMarkersGroup, indiaCarriersMarkersGroup, indiaSubmarinesMarkersGroup, indiaHighlightStyle, "Indian Military Assets & Rivals", "<h3>Indian Military Presence:</h3><p>India (Orange), Rivals (Grey). Triangles (bases/access), Pentagons (carriers), Ovals (subs).</p>");
            if (currentAssetType === "ukAssets" || currentAssetType === "allBases") plotAssets("GBR", ukBasesData, ukAircraftCarriersData, ukSubmarinesData, ukTriangleIcon, '--uk-highlight-fill', '--uk-highlight-fill', ukBasesMarkersGroup, ukCarriersMarkersGroup, ukSubmarinesMarkersGroup, ukHighlightStyle, "UK Military Assets & Rivals", "<h3>UK Military Presence:</h3><p>UK (Dark Blue), Rivals (Grey). Triangles (bases), Pentagons (carriers), Ovals (subs).</p>");
            if (currentAssetType === "franceAssets" || currentAssetType === "allBases") plotAssets("FRA", franceBasesData, franceAircraftCarriersData, franceSubmarinesData, franceTriangleIcon, '--france-highlight-fill', '--france-highlight-fill', franceBasesMarkersGroup, franceCarriersMarkersGroup, franceSubmarinesMarkersGroup, franceHighlightStyle, "French Military Assets & Rivals", "<h3>French Military Presence:</h3><p>France (Purple), Rivals (Grey). Triangles (bases), Pentagons (carriers), Ovals (subs).</p>");
            if (currentAssetType === "italyAssets" || currentAssetType === "allBases") plotAssets("ITA", italyBasesData, italyAircraftCarriersData, italySubmarinesData, italyTriangleIcon, '--italy-highlight-fill', '--italy-highlight-fill', italyBasesMarkersGroup, italyCarriersMarkersGroup, italySubmarinesMarkersGroup, italyHighlightStyle, "Italian Military Assets & Rivals", "<h3>Italian Military Presence:</h3><p>Italy (Lime Green), Rivals (Grey). Triangles (bases), Pentagons (carriers), Ovals (subs).</p>");
            if (currentAssetType === "turkeyAssets" || currentAssetType === "allBases") plotAssets("TUR", turkeyBasesData, turkeyAircraftCarriersData, turkeySubmarinesData, turkeyTriangleIcon, '--turkey-highlight-fill', '--turkey-highlight-fill', turkeyBasesMarkersGroup, turkeyCarriersMarkersGroup, turkeySubmarinesMarkersGroup, turkeyHighlightStyle, "Turkish Military Assets & Rivals", "<h3>Turkish Military Presence:</h3><p>Turkey (Pink), Rivals (Grey). Triangles (bases), Pentagons (carriers/LHDs), Ovals (subs).</p>");
            if (currentAssetType === "israelAssets" || currentAssetType === "allBases") plotAssets("ISR", israelBasesData, [], israelSubmarinesData, israelTriangleIcon, '--israel-highlight-fill', '--israel-highlight-fill', israelBasesMarkersGroup, L.layerGroup(), israelSubmarinesMarkersGroup, israelHighlightStyle, "Israeli Military Assets & Rivals", "<h3>Israeli Military Presence:</h3><p>Israel (Light Blue), Rivals (Grey). Triangles (bases), Ovals (subs). No dedicated carriers.</p>");
            
            // Iran Assets (Bases and Proxies)
            if (currentAssetType === "iranAssets" || currentAssetType === "allBases") { 
                if (countries["IRN"] && countryPolygonLayers["IRN"]) highlightLeafletCountryShape("IRN", iranHighlightStyle);
                iranBasesData.forEach(base => { if (base.lat && base.lon) L.marker([base.lat, base.lon], { icon: iranTriangleIcon }).bindTooltip(base.name + (base.country ? ` (${base.country})` : "")).addTo(iranBasesMarkersGroup); });
                if (currentAssetType === "iranAssets") {
                    panelTitle = "Iranian Military Assets & Rivals";
                    panelContent = "<h3>Iranian Military Presence:</h3><p>Iran (Green), Rivals (Grey). Green triangles for bases.</p>";
                }
                if (currentAssetType === "allBases") { // Proxies only for "All Assets"
                    iranProxiesData.forEach(proxy => { if (proxy.lat && proxy.lon) L.circleMarker([proxy.lat, proxy.lon], { radius: 2 + (proxy.firepower || 1) * 1.5, fillColor: getCssVariable('--iran-proxy-highlight-fill'), color: getCssVariable('--iran-proxy-highlight-border'), weight: 1, opacity: 0.7, fillOpacity: 0.7 }).bindTooltip(`${proxy.name} (${proxy.country})<br>Firepower: ${proxy.firepower}`).addTo(iranProxiesMarkersGroup);});
                }
            }
            
            if (currentAssetType === "allBases") { 
                 panelTitle = "Global Military Assets";
                 panelContent = `<h3>Global Military Assets Overview:</h3>
                    <p>US (Blue), China (Red), Russia (Yellow), India (Orange), UK (Dark Blue), France (Purple), Italy (Lime), Turkey (Pink), Israel (Light Blue). Iran state bases (Green Triangles), Iran proxies (Green Circles).</p>
                    <p>Grey 'X' icons represent strategic chokepoints.</p>`;
                 strategicChokepointsData.forEach(cp => L.marker([cp.lat, cp.lon], { icon: createChokepointMarker(cp.significance) }).bindTooltip(cp.name).addTo(chokepointsMarkersGroup));
            }

            showInfoPanel(panelTitle, panelContent);
            updateAllHighlightStyles(); // Re-apply styles to ensure correct layering of highlights (asset owner vs rival)
        }

        function handleChokepointsView() {
            chokepointsViewActive = true; assetsViewActive = false; assetTypeSelect.style.display = 'none'; assetTypeSelect.value = "allBases";
            nuclearViewActive = false; activeConflictFilter = null; conflictTypeSelect.style.display = 'none'; conflictTypeSelect.value = "";
            selectedBloc = null; blocSelect.style.display = 'none'; blocSelect.value = ""; updateActiveControlStyles();
            if (firstSelectedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode);
            firstSelectedCountryCode = null; secondSelectedCountryCode = null; clearAllLeafletRelationshipLines();
            for (const code in countryPolygonLayers) unhighlightLeafletCountryShape(code);
            strategicChokepointsData.forEach(cp => L.marker([cp.lat, cp.lon], { icon: createChokepointMarker(cp.significance) }).bindTooltip(cp.name).addTo(chokepointsMarkersGroup));
            showInfoPanel("Strategic Chokepoints", "<p>Key maritime chokepoints, marked with grey 'X' icons (sized by significance).</p>");
        }

        function resetToDefaultView(isFullReset = true) { 
            if (firstSelectedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode);
            firstSelectedCountryCode = null; secondSelectedCountryCode = null;
            if(isFullReset) mainViewSelect.value = "";
            selectedBloc = null; blocSelect.value = ""; blocSelect.style.display = 'none';
            activeConflictFilter = null; conflictTypeSelect.value = ""; conflictTypeSelect.style.display = 'none';
            assetsViewActive = false; assetTypeSelect.value = "allBases"; assetTypeSelect.style.display = 'none';
            nuclearViewActive = false; chokepointsViewActive = false; updateActiveControlStyles();
            clearAllLeafletRelationshipLines(); 
            for (const code in countryPolygonLayers) unhighlightLeafletCountryShape(code); 
            for (const code in countryLabels) if(countryLabels[code] && countryLabels[code].getElement()) countryLabels[code].getElement().classList.remove('visible');
            hideInfoPanel();
        }

        function handleCountryClick(clickedCountryCode) {
            mainViewSelect.value = ""; activeConflictFilter = null; conflictTypeSelect.value = ""; conflictTypeSelect.style.display = 'none';
            selectedBloc = null; blocSelect.value = ""; blocSelect.style.display = 'none'; nuclearViewActive = false;
            assetsViewActive = false; assetTypeSelect.value = "allBases"; assetTypeSelect.style.display = 'none'; chokepointsViewActive = false;
            updateActiveControlStyles();
            if(selectedBloc && blocsData[selectedBloc]) { blocsData[selectedBloc].members.forEach(memberCode => { if (countryPolygonLayers[memberCode]) unhighlightLeafletCountryShape(memberCode);});
            } else { if (firstSelectedCountryCode && firstSelectedCountryCode !== clickedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode && secondSelectedCountryCode !== clickedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode);}
            clearAllLeafletRelationshipLines();
            if (!countries[clickedCountryCode]) { if (firstSelectedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode); firstSelectedCountryCode = null; secondSelectedCountryCode = null; clearAllLeafletRelationshipLines(); hideInfoPanel(); return; }
            if (firstSelectedCountryCode && secondSelectedCountryCode && clickedCountryCode !== firstSelectedCountryCode && clickedCountryCode !== secondSelectedCountryCode) { unhighlightLeafletCountryShape(firstSelectedCountryCode); unhighlightLeafletCountryShape(secondSelectedCountryCode); firstSelectedCountryCode = null; secondSelectedCountryCode = null; }
            if (!firstSelectedCountryCode) { firstSelectedCountryCode = clickedCountryCode; highlightLeafletCountryShape(clickedCountryCode); drawLinesForCountryLeaflet(clickedCountryCode); showCountryStatsPanel(clickedCountryCode);
            } else if (!secondSelectedCountryCode) { 
                if (clickedCountryCode === firstSelectedCountryCode) { unhighlightLeafletCountryShape(firstSelectedCountryCode); firstSelectedCountryCode = null; clearAllLeafletRelationshipLines(); hideInfoPanel();
                } else { secondSelectedCountryCode = clickedCountryCode; highlightLeafletCountryShape(clickedCountryCode); if(firstSelectedCountryCode) highlightLeafletCountryShape(firstSelectedCountryCode); clearAllLeafletRelationshipLines(); const rel = relations[getSortedRelationKey(firstSelectedCountryCode, secondSelectedCountryCode)]; if (rel) drawLeafletRelationship(firstSelectedCountryCode, secondSelectedCountryCode, rel.type, rel.strength); else drawLeafletRelationship(firstSelectedCountryCode, secondSelectedCountryCode, 'neutral', 1); showRelationshipPanel(firstSelectedCountryCode, secondSelectedCountryCode);}
            } else { 
                if (clickedCountryCode === firstSelectedCountryCode) { unhighlightLeafletCountryShape(firstSelectedCountryCode); firstSelectedCountryCode = secondSelectedCountryCode; secondSelectedCountryCode = null; drawLinesForCountryLeaflet(firstSelectedCountryCode); showCountryStatsPanel(firstSelectedCountryCode);
                } else if (clickedCountryCode === secondSelectedCountryCode) { unhighlightLeafletCountryShape(secondSelectedCountryCode); secondSelectedCountryCode = null; drawLinesForCountryLeaflet(firstSelectedCountryCode); showCountryStatsPanel(firstSelectedCountryCode);}}
        }

        function handleMapRightClick() { resetToDefaultView(); }
        
        function updateAllHighlightStyles() { 
            for (const code in countryPolygonLayers) {
                if (!countryPolygonLayers[code]) continue;
                let styleToApplyFn = defaultLeafletPolygonStyle; 
                let isHighlightedThisCycle = false;
                let isRivalInCurrentAssetView = false;

                // Check for rival highlighting first if in a specific asset view
                if (assetsViewActive && currentAssetType !== "allBases" && assetViewRivals[currentAssetType]) {
                    const rivalsList = assetViewRivals[currentAssetType];
                    // Special handling for NATO members in Russia's rival list
                    const isRival = currentAssetType === "russiaAssets" ? 
                                    (rivalsList.includes(code) || (blocsData.NATO.members.includes(code) && code !== "RUS")) :
                                    rivalsList.includes(code);
                    if (isRival) {
                        styleToApplyFn = rivalCountryHighlightStyle;
                        isHighlightedThisCycle = true;
                        isRivalInCurrentAssetView = true;
                    }
                }

                if (!isRivalInCurrentAssetView) { // Only apply other highlights if not a rival in current specific asset view
                    if (assetsViewActive) { // Owner country highlights for assets
                        if ((currentAssetType === "usAssets" || currentAssetType === "allBases") && code === "USA") { styleToApplyFn = highlightedLeafletPolygonStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "chinaAssets" || currentAssetType === "allBases") && code === "CHN") { styleToApplyFn = chinaHighlightStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "russiaAssets" || currentAssetType === "allBases") && code === "RUS") { styleToApplyFn = russiaHighlightStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "iranAssets" || currentAssetType === "allBases") && code === "IRN") { styleToApplyFn = iranHighlightStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "indiaAssets" || currentAssetType === "allBases") && code === "IND") { styleToApplyFn = indiaHighlightStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "ukAssets" || currentAssetType === "allBases") && code === "GBR") { styleToApplyFn = ukHighlightStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "franceAssets" || currentAssetType === "allBases") && code === "FRA") { styleToApplyFn = franceHighlightStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "italyAssets" || currentAssetType === "allBases") && code === "ITA") { styleToApplyFn = italyHighlightStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "turkeyAssets" || currentAssetType === "allBases") && code === "TUR") { styleToApplyFn = turkeyHighlightStyle; isHighlightedThisCycle = true;}
                        else if ((currentAssetType === "israelAssets" || currentAssetType === "allBases") && code === "ISR") { styleToApplyFn = israelHighlightStyle; isHighlightedThisCycle = true;}
                    } else if (nuclearViewActive) {
                        let nuclearStyleFn = null;
                        if (nuclearData.nonNPT.some(item => item.country === code)) nuclearStyleFn = nuclearNonNPTStyle;
                        else if (nuclearData.declaredNPT.some(item => item.country === code)) nuclearStyleFn = nuclearDeclaredStyle;
                        else if (nuclearData.threshold.some(item => item.country === code)) nuclearStyleFn = nuclearThresholdStyle;
                        if (nuclearStyleFn) { styleToApplyFn = nuclearStyleFn; isHighlightedThisCycle = true; }
                    } else if (activeConflictFilter) {
                        let currentPriority = 0; 
                        if (activeConflictFilter === 'activeWar' || activeConflictFilter === 'allConflicts') { conflictData.activeWar.forEach(conflict => { if (conflict.pair && conflict.pair.includes(code) && currentPriority < 4) { styleToApplyFn = conflictStyleRed; isHighlightedThisCycle = true; currentPriority = 4; } else if (conflict.country === code && currentPriority < 4) { styleToApplyFn = conflictStyleRed; isHighlightedThisCycle = true; currentPriority = 4;} });}
                        if (activeConflictFilter === 'civilWarFailedState' || activeConflictFilter === 'allConflicts') { conflictData.civilWarFailedState.forEach(conflict => { if (conflict.country === code && currentPriority < 3) { styleToApplyFn = conflictStyleBrown; isHighlightedThisCycle = true; currentPriority = 3; } });}
                        if (activeConflictFilter === 'exchangesOfFire' || activeConflictFilter === 'allConflicts') { conflictData.exchangesOfFire.forEach(conflict => { if (conflict.pair && conflict.pair.includes(code) && currentPriority < 2) { styleToApplyFn = conflictStyleOrange; isHighlightedThisCycle = true; currentPriority = 2; } });}
                        if (activeConflictFilter === 'potentialConflicts' || activeConflictFilter === 'allConflicts') { conflictData.potentialConflicts.forEach(conflict => { if (conflict.pair && conflict.pair.includes(code) && currentPriority < 1) { styleToApplyFn = conflictStyleYellow; isHighlightedThisCycle = true; currentPriority = 1; } });}
                    } else if (selectedBloc && blocsData[selectedBloc] && blocsData[selectedBloc].members.includes(code)) {
                        styleToApplyFn = blocHighlightStyle; isHighlightedThisCycle = true;
                    } else if (code === firstSelectedCountryCode || code === secondSelectedCountryCode) {
                        styleToApplyFn = highlightedLeafletPolygonStyle; isHighlightedThisCycle = true;
                    }
                }
                
                countryPolygonLayers[code].setStyle(styleToApplyFn()); 
                if(isHighlightedThisCycle && countryLabels[code] && countryLabels[code].getElement()) countryLabels[code].getElement().classList.add('visible');
                else if (countryLabels[code] && countryLabels[code].getElement()) countryLabels[code].getElement().classList.remove('visible');
            }
        }
        
        function updateActiveControlStyles() {
            mainViewSelect.classList.toggle('active-control', mainViewSelect.value !== "" && mainViewSelect.value !== "showAllRelations");
            assetTypeSelect.classList.toggle('active-control', assetsViewActive && mainViewSelect.value === "assets");
            blocSelect.classList.toggle('active-control', !!selectedBloc && mainViewSelect.value === "blocs");
            conflictTypeSelect.classList.toggle('active-control', !!activeConflictFilter && mainViewSelect.value === "conflicts");
            themeSwitchWrapper.classList.toggle('active-control', themeToggle.checked);
        }

        function toggleTheme(isDark) {
            document.body.classList.toggle('dark-mode', isDark); localStorage.setItem('theme', isDark ? 'dark' : 'light'); updateActiveControlStyles(); 
            if (leafletMap) { 
                if (isDark) { if (leafletMap.hasLayer(lightTileLayer)) leafletMap.removeLayer(lightTileLayer); if (!leafletMap.hasLayer(darkTileLayer)) leafletMap.addLayer(darkTileLayer);} 
                else { if (leafletMap.hasLayer(darkTileLayer)) leafletMap.removeLayer(darkTileLayer); if (!leafletMap.hasLayer(lightTileLayer)) leafletMap.addLayer(lightTileLayer);}
            } updateAllHighlightStyles(); 
        }

        function handleMainViewSelection() {
            const selectedView = mainViewSelect.value;
            selectedBloc = null; blocSelect.value = ""; blocSelect.style.display = 'none'; activeConflictFilter = null; conflictTypeSelect.value = ""; conflictTypeSelect.style.display = 'none';
            assetsViewActive = false; assetTypeSelect.value = "allBases"; assetTypeSelect.style.display = 'none'; nuclearViewActive = false; chokepointsViewActive = false;
            if (firstSelectedCountryCode) unhighlightLeafletCountryShape(firstSelectedCountryCode); if (secondSelectedCountryCode) unhighlightLeafletCountryShape(secondSelectedCountryCode);
            firstSelectedCountryCode = null; secondSelectedCountryCode = null; clearAllLeafletRelationshipLines();
            for (const code in countryPolygonLayers) unhighlightLeafletCountryShape(code); for (const code in countryLabels) if(countryLabels[code] && countryLabels[code].getElement()) countryLabels[code].getElement().classList.remove('visible');
            hideInfoPanel();

            if (selectedView === "showAllRelations") { resetToDefaultView(false); drawAllInitialLeafletRelations(); for (const code in countryLabels) if (countryLabels[code] && countryLabels[code].getElement()) countryLabels[code].getElement().classList.add('visible');} 
            else if (selectedView === "nuclear") handleNuclearView();
            else if (selectedView === "assets") { assetTypeSelect.style.display = 'block'; handleAssetTypeSelection(); } 
            else if (selectedView === "conflicts") { conflictTypeSelect.style.display = 'block'; conflictTypeSelect.value = "allConflicts"; handleConflictTypeSelection(); } 
            else if (selectedView === "blocs") { blocSelect.style.display = 'block'; blocSelect.value = "UN"; handleBlocSelection(); } 
            else if (selectedView === "chokepoints") handleChokepointsView();
            else resetToDefaultView(false); 
            updateActiveControlStyles();
        }

        async function initialize() {
            ensureBlocMemberData(); initLeafletMap(); 
            const geoJsonLoaded = await addLeafletCountriesLayer(); 
            if (geoJsonLoaded) {
                const processedRelations = {}; const validCountryCodes = Object.keys(countries);
                for (const key in relations) { if (relations.hasOwnProperty(key)) { const parts = key.split('-'); if (parts.length === 2 && validCountryCodes.includes(parts[0]) && validCountryCodes.includes(parts[1])) { const sortedKey = getSortedRelationKey(parts[0], parts[1]); if (!processedRelations[sortedKey]) processedRelations[sortedKey] = relations[key];}}}
                relations = processedRelations; resetToDefaultView(); 
                mainViewSelect.addEventListener('change', handleMainViewSelection); assetTypeSelect.addEventListener('change', handleAssetTypeSelection);
                infoPanelClose.addEventListener('click', hideInfoPanel); blocSelect.addEventListener('change', handleBlocSelection);
                conflictTypeSelect.addEventListener('change', handleConflictTypeSelection);
                themeToggle.addEventListener('change', (event) => toggleTheme(event.target.checked));
                const currentTheme = localStorage.getItem('theme'); const isDark = currentTheme === 'dark'; themeToggle.checked = isDark; toggleTheme(isDark); 
            } else console.warn("GeoJSON failed to load. Some map functionalities will be unavailable.");
        }
        window.onload = initialize;
        window.onresize = function() { if (leafletMap) leafletMap.invalidateSize(); };
    </script>
</body>
</html>
```